{"version":3,"sources":["components/BondLogo.tsx","views/Bond/BondDialog/components/AdvancedSettings/index.tsx","views/Bond/BondDialog/components/BondPurchase/index.tsx","views/Bond/BondDialog/components/Mint/index.tsx","views/Bond/BondDialog/components/Redeem/index.tsx","views/Bond/BondDialog/index.tsx"],"names":["BondLogo","bondLogoPath","style","height","width","isLP","display","alignItems","justifyContent","src","AdvancedSettings","slippage","recipientAddress","handleChange","handleClose","t","useTranslation","useState","toString","slippageValue","setSlippageValue","address","setAddress","useEffect","Number","Paper","sx","p","theme","spacing","pb","Box","textAlign","IconButton","onClick","SvgIcon","color","component","Close","Typography","variant","mt","FormControl","fullWidth","FormLabel","OutlinedInput","value","onChange","e","target","type","endAdornment","InputAdornment","position","FormHelperText","className","id","BondPurchase","bondID","dispatch","useDispatch","useSafeSigner","signer","signerAddress","bondMetrics","useSelector","state","selectBondItemMetrics","bondInstance","selectBondInstance","marginBottom","paddingBottom","Grid","container","item","xs","AmountForm","initialValue","maxValue","balance","transactionType","approvesNeeded","allowance","onApprove","approveBonds","onAction","amount","depositBond","approveLabel","token","bondOptions","displayName","actionLabel","Mint","metrics","selectBondMintingMetrics","quote","maxBondPrice","vestingTerm","bondDiscount","metricKey","formatUSD","count","map","index","key","Divider","borderColor","palette","primary","light","MintLoader","bondsReady","selectBondsReady","Loader","Redeem","selectBondRedeemMetrics","bondQuote","selectBondQuoteResult","isClaiming","selectIsRedeeming","isClaimingAndStaking","selectIsRedeemingAndAutoStaking","useWeb3Context","networkID","interestDue","pendingPayout","vesting","calcBondDetails","handleClaim","isAutoStake","redeemBond","flexDirection","mb","Button","RedeemLoader","BondDialog","open","bond","history","useHistory","useContext","Web3Context","showAdvancedSettings","setShowAdvancedSettings","bashPrice","selectFormattedReservePrice","bondPrice","selectBondPrice","setSlippage","setRecipientAddress","containerRef","useRef","bondActions","label","loadBondBalancesAndAllowances","calculateUserBondDetails","Dialog","onBackdropClick","goBack","maxWidth","PaperProps","background","cardBackground","dark","breakpoints","up","DialogTitle","gap","iconPath","settings","DialogContent","minHeight","only","padding","paddingRight","sm","MenuMetric","borderBottom","BMultiTab","tabs","overflow","ref","Slide","direction","in","mountOnEnter","unmountOnExit","timeout","current","paddingTop","args","BondDialogLoader","selectBondMetricsReady"],"mappings":"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","file":"static/js/7.f066f10f.chunk.js","sourcesContent":["import { Box } from '@mui/material';\n\ninterface IBondLogoProps {\n    bondLogoPath: string;\n    isLP: boolean;\n}\n\nfunction BondLogo({ bondLogoPath, isLP }: IBondLogoProps) {\n    let style = { height: '32px', width: '32px' };\n\n    if (isLP) {\n        style = { height: '32px', width: '62px' };\n    }\n\n    return (\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" width={'64px'}>\n            <img src={bondLogoPath} style={style} />\n        </Box>\n    );\n}\n\nexport default BondLogo;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ChangeEvent, useEffect, useState } from 'react';\n\nimport { Close } from '@mui/icons-material';\nimport { Box, Paper, SvgIcon, IconButton, FormControl, OutlinedInput, InputAdornment, Typography, FormHelperText, FormLabel } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\nimport { theme } from 'constants/theme';\n\ninterface IAdvancedSettingsProps {\n    handleChange: (args: { recipientAddress: string; slippage: number }) => void;\n    handleClose: () => void;\n    slippage: number;\n    recipientAddress: string;\n}\n\nexport const AdvancedSettings = ({ slippage, recipientAddress, handleChange, handleClose }: IAdvancedSettingsProps) => {\n    const { t } = useTranslation();\n\n    const [slippageValue, setSlippageValue] = useState(slippage.toString());\n    const [address, setAddress] = useState(recipientAddress);\n\n    useEffect(() => {\n        handleChange({ recipientAddress: address, slippage: Number(slippageValue) });\n    }, [slippageValue, address]);\n\n    return (\n        <Paper sx={{ p: theme.spacing(2), pb: theme.spacing(4) }}>\n            <Box textAlign={'right'}>\n                <IconButton onClick={handleClose}>\n                    <SvgIcon color=\"primary\" component={Close} />\n                </IconButton>\n            </Box>\n\n            <Typography variant=\"h4\">\n                <>{t('bond:Settings')}</>\n            </Typography>\n\n            <Box mt={theme.spacing(4)}>\n                <FormControl variant=\"outlined\" color=\"primary\" fullWidth>\n                    <FormLabel component=\"legend\">\n                        <>{t('bond:Slippage')}</>\n                    </FormLabel>\n                    <OutlinedInput\n                        value={slippageValue}\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            setSlippageValue(e.target.value);\n                        }}\n                        fullWidth\n                        type=\"number\"\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <> %</>\n                            </InputAdornment>\n                        }\n                    />\n                    <FormHelperText>\n                        <>{t('bond:SlippageHelpText')}</>\n                    </FormHelperText>\n                </FormControl>\n\n                <FormControl variant=\"outlined\" color=\"primary\" fullWidth sx={{ mt: theme.spacing(4) }}>\n                    <FormLabel component=\"legend\">\n                        <>{t('bond:RecipientAddress')}</>\n                    </FormLabel>\n                    <OutlinedInput className=\"bond-input\" id=\"recipient\" value={address} onChange={(e: ChangeEvent<HTMLInputElement>) => setAddress(e.target.value)} type=\"text\" />\n                    <FormHelperText>\n                        <>{t('bond:RecipientAddressHelpText')}</>\n                    </FormHelperText>\n                </FormControl>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default AdvancedSettings;\n","import { Box, Grid } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useSafeSigner } from 'contexts/web3/web3.hooks';\nimport { selectBondInstance, selectBondItemMetrics } from 'store/modules/bonds/bonds.selector';\nimport { approveBonds, depositBond } from 'store/modules/bonds/bonds.thunks';\nimport { RootState } from 'store/store';\nimport AmountForm from 'views/Staking/components/AmountForm';\n\nconst BondPurchase = ({ bondID, slippage, recipientAddress }: { bondID: string; slippage: number; recipientAddress: string }) => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { signer, signerAddress } = useSafeSigner();\n\n    const bondMetrics = useSelector((state: RootState) => selectBondItemMetrics(state, bondID));\n    const bondInstance = useSelector((state: RootState) => selectBondInstance(state, bondID));\n\n    const depositBondAction = (amount: number) => {\n        dispatch(depositBond({ amount, signer, signerAddress, bondID, slippage, recipientAddress }));\n    };\n\n    const handleApproveClick = () => {\n        dispatch(approveBonds({ signer, bondID }));\n    };\n\n    return (\n        <Box sx={{ color: 'white', marginBottom: 2, paddingBottom: 2 }}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <AmountForm\n                        initialValue={0}\n                        maxValue={bondMetrics?.balance || 0}\n                        transactionType={'BASH_APPROVAL'}\n                        approvesNeeded={!bondMetrics?.allowance}\n                        onApprove={handleApproveClick}\n                        onAction={depositBondAction}\n                        approveLabel={t('bond:ZapinApproveToken', { token: bondInstance ? bondInstance.bondOptions.displayName : '' })}\n                        actionLabel={t('bond:Mint')}\n                    />\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default BondPurchase;\n","import { Box, Divider } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport Loader from 'components/Loader';\nimport MemoInlineMetric from 'components/Metrics/InlineMetric';\nimport { theme } from 'constants/theme';\nimport { formatUSD } from 'helpers/price-units';\nimport { selectBondItemMetrics, selectBondMintingMetrics, selectBondsReady } from 'store/modules/bonds/bonds.selector';\nimport { BondMetrics } from 'store/modules/bonds/bonds.types';\nimport { RootState } from 'store/store';\n\nimport BondPurchase from '../BondPurchase';\n\nconst Mint = ({ bondID, metrics, recipientAddress, slippage }: { bondID: string; metrics: BondMetrics; slippage: number; recipientAddress: string }) => {\n    const { t } = useTranslation();\n    const { balance, quote, maxBondPrice, vestingTerm, bondDiscount } = selectBondMintingMetrics(metrics);\n\n    const bondMetrics = [\n        { value: balance, metricKey: t('bond:YourBalance') },\n        { value: quote, metricKey: t('bond:YouWillGet') },\n        { value: maxBondPrice ? formatUSD(maxBondPrice, 2).toString() : null, metricKey: t('bond:MaxYouCanBuy') },\n        { metricKey: t('bond:Discount'), value: bondDiscount },\n        { metricKey: t('bond:VestingTerm'), value: t('common:day', { count: vestingTerm || 0 }) },\n        { metricKey: t('bond:MinimumPurchase'), value: '0.01 BASH' },\n    ].map(({ value, metricKey }, index) => <MemoInlineMetric {...{ value, metricKey }} key={index} />);\n\n    return (\n        <Box>\n            <BondPurchase bondID={bondID} slippage={slippage} recipientAddress={recipientAddress} />\n            <Divider variant=\"fullWidth\" textAlign=\"center\" sx={{ borderColor: theme.palette.primary.light, marginBottom: theme.spacing(2) }} />\n            <Box>{bondMetrics}</Box>\n        </Box>\n    );\n};\n\nconst MintLoader = ({ bondID, slippage, recipientAddress }: { bondID: string; slippage: number; recipientAddress: string }) => {\n    const bondsReady = useSelector(selectBondsReady);\n    const metrics = useSelector((state: RootState) => selectBondItemMetrics(state, bondID));\n\n    if (!bondsReady) return <Loader />;\n\n    return <Mint bondID={bondID} metrics={metrics} slippage={slippage} recipientAddress={recipientAddress} />;\n};\n\nexport default MintLoader;\n","import { useEffect } from 'react';\n\nimport { Box, Button, Divider } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Loader from 'components/Loader';\nimport MemoInlineMetric from 'components/Metrics/InlineMetric';\nimport { theme } from 'constants/theme';\nimport { useWeb3Context } from 'contexts/web3/web3.context';\nimport { selectBondsReady, selectBondItemMetrics, selectBondRedeemMetrics, selectBondQuoteResult } from 'store/modules/bonds/bonds.selector';\nimport { calcBondDetails, redeemBond } from 'store/modules/bonds/bonds.thunks';\nimport { BondMetrics } from 'store/modules/bonds/bonds.types';\nimport { selectIsRedeeming, selectIsRedeemingAndAutoStaking } from 'store/modules/transactions/transactions.selectors';\nimport { RootState } from 'store/store';\n\nexport const Redeem = ({ bondID, metrics, recipientAddress }: { bondID: string; metrics: BondMetrics; recipientAddress: string }) => {\n    const dispatch = useDispatch();\n    const { t } = useTranslation();\n    const { bondDiscount, vestingTerm } = selectBondRedeemMetrics(metrics);\n\n    const bondQuote = useSelector((state: RootState) => selectBondQuoteResult(state, t));\n    const isClaiming = useSelector(selectIsRedeeming);\n    const isClaimingAndStaking = useSelector(selectIsRedeemingAndAutoStaking);\n\n    const {\n        state: { networkID, signer },\n    } = useWeb3Context();\n\n    const bondMetrics = [\n        { value: bondQuote.interestDue, metricKey: t('bond:PendingRewards') },\n        { value: bondQuote.pendingPayout, metricKey: t('bond:PendingPayout') },\n        { value: bondQuote.vesting, metricKey: t('bond:TimeFullyVested') },\n        { value: bondDiscount, metricKey: t('ROI') },\n        { value: t('common:day', { count: vestingTerm || 0 }), metricKey: t('bond:VestingTerm') },\n    ].map(({ value, metricKey }, index) => <MemoInlineMetric {...{ value, metricKey }} key={index} />);\n\n    useEffect(() => {\n        if (networkID) {\n            dispatch(calcBondDetails({ bondID, value: 0, networkID }));\n        }\n    }, [networkID]);\n\n    const handleClaim = ({ isAutoStake }: { isAutoStake: boolean }) => {\n        if (signer) {\n            dispatch(\n                redeemBond({\n                    recipientAddress,\n                    bondID,\n                    isAutoStake,\n                    signer,\n                }),\n            );\n        }\n    };\n\n    return (\n        <Box>\n            <Box sx={{ justifyContent: 'center', display: 'flex', alignItems: 'center', flexDirection: 'column', mb: theme.spacing(2) }}>\n                <Box mt={theme.spacing(2)} width={'50%'} p={theme.spacing(2)}>\n                    <Button sx={{ width: '5rem' }} onClick={() => handleClaim({ isAutoStake: false })}>\n                        {isClaiming ? t('common:PendingEllipsis') : t('bond:Claim')}\n                    </Button>\n                </Box>\n\n                <Box mt={theme.spacing(2)} width={'50%'} p={theme.spacing(2)}>\n                    <Button sx={{ width: '5rem' }} onClick={() => handleClaim({ isAutoStake: true })}>\n                        {isClaimingAndStaking ? t('common:PendingEllipsis') : t('bond:ClaimAutostake')}\n                    </Button>\n                </Box>\n            </Box>\n\n            <Divider variant=\"fullWidth\" textAlign=\"center\" sx={{ borderColor: theme.palette.primary.light, marginBottom: theme.spacing(2) }} />\n            <Box>{bondMetrics}</Box>\n        </Box>\n    );\n};\n\nconst RedeemLoader = ({ bondID, recipientAddress }: { bondID: string; recipientAddress: string }) => {\n    const bondsReady = useSelector(selectBondsReady);\n    const metrics = useSelector((state: RootState) => selectBondItemMetrics(state, bondID));\n\n    if (!bondsReady) return <Loader />;\n    return <Redeem bondID={bondID} metrics={metrics} recipientAddress={recipientAddress} />;\n};\n\nexport default RedeemLoader;\n","import { useContext, useEffect, useRef, useState } from 'react';\n\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport { Box, Dialog, DialogContent, DialogTitle, Grid, Slide, Typography } from '@mui/material';\nimport { t } from 'i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { BMultiTabs } from 'components/BMultiTab/BMultiTab';\nimport BondLogo from 'components/BondLogo';\nimport Loader from 'components/Loader';\nimport MenuMetric from 'components/Metrics/MenuMetric';\nimport { theme } from 'constants/theme';\nimport { Web3Context } from 'contexts/web3/web3.context';\nimport { selectFormattedReservePrice } from 'store/modules/app/app.selectors';\nimport { selectBondInstance, selectBondMetricsReady, selectBondPrice } from 'store/modules/bonds/bonds.selector';\nimport { calculateUserBondDetails, loadBondBalancesAndAllowances } from 'store/modules/bonds/bonds.thunks';\nimport { Bond } from 'store/modules/bonds/bonds.types';\nimport { RootState } from 'store/store';\n\nimport AdvancedSettings from './components/AdvancedSettings';\nimport Mint from './components/Mint';\nimport Redeem from './components/Redeem';\n\ninterface BondDialogProps {\n    open: boolean;\n    bondID: string;\n    bond: Bond;\n}\n\nconst BondDialog = ({ open, bondID, bond }: BondDialogProps) => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const onBackdropClick = () => history.goBack();\n\n    const {\n        state: { signer, signerAddress },\n    } = useContext(Web3Context);\n\n    const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);\n\n    const bashPrice = useSelector(selectFormattedReservePrice);\n    const bondPrice = useSelector((state: RootState) => selectBondPrice(state, bondID));\n\n    const [slippage, setSlippage] = useState(0.5);\n    const [recipientAddress, setRecipientAddress] = useState(signerAddress);\n\n    const handleAdvancedSettingsClick = () => {\n        setShowAdvancedSettings(settings => !settings);\n    };\n\n    const handleSettingsChange = (args: { recipientAddress: string; slippage: number }) => {\n        if (slippage !== args.slippage) setSlippage(args.slippage);\n\n        if (recipientAddress !== args.recipientAddress) setRecipientAddress(args.recipientAddress);\n    };\n\n    const containerRef = useRef(null);\n\n    const bondActions = [\n        {\n            label: t('mint:Mint'),\n            component: <Mint bondID={bondID} slippage={slippage} recipientAddress={recipientAddress ?? ''} />,\n        },\n        {\n            label: t('mint:Redeem'),\n            component: <Redeem bondID={bondID} recipientAddress={recipientAddress ?? ''} />,\n        },\n    ];\n\n    useEffect(() => {\n        if (signerAddress) {\n            dispatch(loadBondBalancesAndAllowances({ address: signerAddress, bondID }));\n        }\n    }, [signerAddress]);\n\n    useEffect(() => {\n        if (signer && signerAddress) {\n            dispatch(calculateUserBondDetails({ signer, signerAddress, bondID }));\n        }\n    }, [signer, signerAddress]);\n\n    return (\n        <Dialog\n            {...{\n                onBackdropClick,\n                open,\n                maxWidth: 'xl',\n                fullWidth: true,\n                PaperProps: { sx: { background: theme.palette.cardBackground.light, color: theme.palette.primary.dark } },\n            }}\n            sx={{\n                p: 4,\n                [theme.breakpoints.up('xs')]: {\n                    p: 0,\n                },\n                backdropFilter: 'blur(10px)',\n            }}\n        >\n            <DialogTitle sx={{ display: 'flex', position: 'relative', alignItems: 'center', justifyContent: 'center', gap: theme.spacing(1) }}>\n                <Grid container>\n                    <Grid item xs={10} sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <BondLogo bondLogoPath={bond.bondOptions.iconPath} isLP={bond.isLP()} />\n                        <Typography variant=\"body1\">{bond.bondOptions.displayName}</Typography>\n                    </Grid>\n\n                    <Grid item xs={2} onClick={handleAdvancedSettingsClick} sx={{ textAlign: 'right' }}>\n                        <SettingsIcon />\n                    </Grid>\n                </Grid>\n            </DialogTitle>\n            <DialogContent sx={{ position: 'relative', minHeight: '40rem', [theme.breakpoints.only('xs')]: { padding: theme.spacing(1) } }}>\n                <Box sx={{ position: 'relative', width: '100%' }}>\n                    <Box\n                        sx={{\n                            [theme.breakpoints.only('xs')]: { paddingRight: theme.spacing(1) },\n                            position: 'absolute',\n                            width: '100%',\n                            opacity: showAdvancedSettings ? 0.1 : 1,\n                        }}\n                    >\n                        <Box sx={{ [theme.breakpoints.only('xs')]: { paddingRight: theme.spacing(1) } }}>\n                            <Grid container item xs={12} mb={4}>\n                                <Grid item xs={12} sm={6}>\n                                    <MenuMetric key={'MintPrice'} metricKey={t('bond:MintPrice')} value={bondPrice} />\n                                </Grid>\n\n                                <Grid item xs={12} sm={6}>\n                                    <MenuMetric key={'BashPrice'} metricKey={t('BASHPrice')} value={bashPrice} />\n                                </Grid>\n                            </Grid>\n                        </Box>\n\n                        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                            <BMultiTabs tabs={bondActions} />\n                        </Box>\n                    </Box>\n                    <Box\n                        sx={{\n                            overflow: 'hidden',\n                            position: 'absolute',\n                            width: showAdvancedSettings ? '100%' : '0',\n                            height: '25rem',\n                            [theme.breakpoints.only('xs')]: { paddingRight: theme.spacing(1) },\n                        }}\n                        ref={containerRef}\n                    >\n                        <Slide direction=\"left\" in={showAdvancedSettings === true} mountOnEnter unmountOnExit timeout={300} container={containerRef.current}>\n                            <Grid item xs={12} sx={{ paddingBottom: theme.spacing(1), paddingTop: theme.spacing(1), height: '100%' }}>\n                                <AdvancedSettings\n                                    slippage={slippage}\n                                    recipientAddress={recipientAddress ?? ''}\n                                    handleChange={handleSettingsChange}\n                                    handleClose={() => setShowAdvancedSettings(false)}\n                                />\n                            </Grid>\n                        </Slide>\n                    </Box>\n                </Box>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nconst BondDialogLoader = ({ open, bondID }: { open: boolean; bondID: string }) => {\n    const metrics = useSelector((state: RootState) => selectBondMetricsReady(state, bondID));\n    const bond = useSelector((state: RootState) => selectBondInstance(state, bondID));\n\n    if (!metrics || !bond) return <Loader />;\n\n    return <BondDialog open={open} bondID={bondID} bond={bond} />;\n};\n\nexport default BondDialogLoader;\n"],"sourceRoot":""}