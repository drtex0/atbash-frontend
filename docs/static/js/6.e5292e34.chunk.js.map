{"version":3,"sources":["components/BondLogo.tsx","views/Bond/BondList/BondListItem.tsx","views/Bond/BondList/BondList.tsx"],"names":["BondLogo","bondLogoPath","style","height","width","isLP","display","alignItems","justifyContent","src","BondMintMetric","metric","value","Grid","item","sm","xs","sx","theme","breakpoints","up","Box","Typography","variant","Skeleton","BondtListItem","bondID","bond","metrics","networkID","t","useTranslation","dispatch","useDispatch","signerConnected","useSignerConnected","useEffect","calcBondDetails","selectBondMintingMetrics","bondPrice","bondDiscount","purchased","bondMetrics","bondSoldOut","map","i","container","color","palette","primary","main","marginBottom","spacing","paddingBottom","bondOptions","iconPath","displayName","border","down","Button","disabled","padding","cursor","Link","component","NavLink","to","textDecoration","isActive","BondListItemLoader","useSelector","state","selectBondInstance","selectBondItemMetrics","useWeb3Context","Loader","BondHeader","BondList","selectAllBonds","activeBonds","inactiveBonds","bashPrice","selectFormattedBashBalance","treasuryBalance","selectFormattedTreasuryBalance","bondsReady","selectBondsReady","getBondMetrics","ActiveBondList","useMemo","ID","InactiveBondList","BCard","title","zoom","mb","MenuMetric","metricKey","className"],"mappings":"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","file":"static/js/6.e5292e34.chunk.js","sourcesContent":["import { Box } from '@mui/material';\n\ninterface IBondLogoProps {\n    bondLogoPath: string;\n    isLP: boolean;\n}\n\nfunction BondLogo({ bondLogoPath, isLP }: IBondLogoProps) {\n    let style = { height: '32px', width: '32px' };\n\n    if (isLP) {\n        style = { height: '32px', width: '62px' };\n    }\n\n    return (\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" width={'64px'}>\n            <img src={bondLogoPath} style={style} />\n        </Box>\n    );\n}\n\nexport default BondLogo;\n","import { useEffect } from 'react';\n\nimport { Box, Button, Grid, Link, Skeleton, Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport BondLogo from 'components/BondLogo';\nimport Loader from 'components/Loader';\nimport { theme } from 'constants/theme';\nimport { useWeb3Context } from 'contexts/web3/web3.context';\nimport { useSignerConnected } from 'contexts/web3/web3.hooks';\nimport { LPBond } from 'lib/bonds/bond/lp-bond';\nimport { StableBond } from 'lib/bonds/bond/stable-bond';\nimport { selectBondInstance, selectBondItemMetrics, selectBondMintingMetrics } from 'store/modules/bonds/bonds.selector';\nimport { calcBondDetails } from 'store/modules/bonds/bonds.thunks';\nimport { BondMetrics } from 'store/modules/bonds/bonds.types';\nimport { IReduxState } from 'store/slices/state.interface';\n\ninterface IBondProps {\n    bondID: string;\n    metrics: BondMetrics;\n    bond: LPBond | StableBond;\n    networkID: number;\n}\n\nconst BondMintMetric = ({ metric, value }: { metric: string; value: string | null }) => {\n    return (\n        <Grid\n            item\n            sm={2}\n            xs={12}\n            sx={{\n                [theme.breakpoints.up('xs')]: { display: 'inline-flex', justifyContent: 'space-between', alignItems: 'center' },\n            }}\n        >\n            <Box\n                sx={{\n                    [theme.breakpoints.up('xs')]: { display: 'flex' },\n                    [theme.breakpoints.up('sm')]: { display: 'none' },\n                }}\n            >\n                <Typography variant=\"body1\">{metric}</Typography>\n            </Box>\n            <Box sx={{ width: '100%' }}>\n                {!value && <Skeleton />}\n                {value && <Typography variant=\"h6\">{value}</Typography>}\n            </Box>\n        </Grid>\n    );\n};\n\nconst BondtListItem = ({ bondID, bond, metrics, networkID }: IBondProps) => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const signerConnected = useSignerConnected();\n\n    useEffect(() => {\n        if (!bond && !metrics) {\n            dispatch(calcBondDetails({ bondID, value: 0, networkID }));\n        }\n    }, [bond, metrics]);\n\n    const { bondPrice, bondDiscount, purchased, bondSoldOut } = selectBondMintingMetrics(metrics);\n\n    const bondMetrics = [\n        { metric: t('bond:Mint'), value: bondPrice },\n        { metric: t('Price'), value: bondDiscount },\n        { metric: t('ROI'), value: purchased },\n    ].map((metric, i) => <BondMintMetric key={`bondMetric-${i}`} {...metric} />);\n\n    return (\n        <Grid\n            container\n            sx={{\n                color: bondSoldOut ? theme.palette.primary.main : theme.palette.primary.main,\n                [theme.breakpoints.up('xs')]: { marginBottom: theme.spacing(2), paddingBottom: theme.spacing(4) },\n                [theme.breakpoints.up('sm')]: { marginBottom: theme.spacing(0), paddingBottom: theme.spacing(2) },\n                alignItems: 'center',\n            }}\n        >\n            <Grid item sm={1} xs={4}>\n                <BondLogo bondLogoPath={bond.bondOptions.iconPath} isLP={bond.isLP()} />\n            </Grid>\n            <Grid item sm={2} xs={8}>\n                <Typography variant=\"body1\">{bond.bondOptions.displayName}</Typography>\n            </Grid>\n            {bondMetrics}\n\n            <Grid\n                item\n                sm={3}\n                sx={{\n                    border: '1px solid',\n                    [theme.breakpoints.down('xs')]: {\n                        display: 'none',\n                    },\n                }}\n            >\n                {signerConnected && (\n                    <Button disabled={false} sx={{ padding: `${theme.spacing(1)} ${theme.spacing(3)}`, cursor: 'pointer' }}>\n                        <Link component={NavLink} to={`/bond/${bondID}`} sx={{ color: 'inherit', textDecoration: 'none' }}>\n                            <Typography>\n                                <>{bond.bondOptions.isActive ? t('bond:MintBond', { bond: bondID }) : t('bond:RedeemBond', { bond: bondID })}</>\n                            </Typography>\n                        </Link>\n                    </Button>\n                )}\n            </Grid>\n        </Grid>\n    );\n};\n\nconst BondListItemLoader = ({ bondID }: { bondID: string }) => {\n    const bond = useSelector((state: IReduxState) => selectBondInstance(state, bondID));\n    const metrics = useSelector((state: IReduxState) => selectBondItemMetrics(state, bondID));\n    const {\n        state: { networkID },\n    } = useWeb3Context();\n\n    if (!metrics || !bond || !networkID) return <Loader />;\n\n    return <BondtListItem bondID={bondID} bond={bond} metrics={metrics} networkID={networkID} />;\n};\n\nexport default BondListItemLoader;\n","import './bondlist.scss';\nimport { useEffect, useMemo } from 'react';\n\nimport { Box, Typography, Grid } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { BCard } from 'components/BCard';\nimport { MenuMetric } from 'components/Metrics/MenuMetric';\nimport { theme } from 'constants/theme';\nimport { useWeb3Context } from 'contexts/web3/web3.context';\nimport { selectAllBonds, selectBondsReady, selectFormattedTreasuryBalance } from 'store/modules/bonds/bonds.selector';\nimport { getBondMetrics } from 'store/modules/bonds/bonds.thunks';\nimport { selectFormattedBashBalance } from 'store/modules/markets/markets.selectors';\n\nimport BondtListItem from './BondListItem';\n\nconst BondHeader = () => {\n    const { t } = useTranslation();\n\n    return (\n        <Grid\n            container\n            sx={{\n                [theme.breakpoints.up('xs')]: {\n                    display: 'none',\n                },\n                [theme.breakpoints.up('sm')]: {\n                    display: 'inline-flex',\n                },\n                color: theme.palette.primary.main,\n            }}\n        >\n            <Grid item sm={1} />\n            <Grid item sm={2}>\n                <Typography variant=\"h6\">\n                    <>{t('bond:Mint')}</>\n                </Typography>\n            </Grid>\n            <Grid item sm={2}>\n                <Typography variant=\"h6\">\n                    <>{t('Price')}</>\n                </Typography>\n            </Grid>\n            <Grid item sm={2}>\n                <Typography variant=\"h6\">\n                    <>{t('ROI')}</>\n                </Typography>\n            </Grid>\n            <Grid item sm={2}>\n                <Typography variant=\"h6\">\n                    <>{t('bond:Purchased')}</>\n                </Typography>\n            </Grid>\n            <Grid item sm={2} />\n        </Grid>\n    );\n};\n\nfunction BondList() {\n    const { t } = useTranslation();\n\n    const {\n        state: { networkID },\n    } = useWeb3Context();\n    const dispatch = useDispatch();\n\n    const { activeBonds, inactiveBonds } = useSelector(selectAllBonds);\n    const bashPrice = useSelector(selectFormattedBashBalance);\n    const treasuryBalance = useSelector(selectFormattedTreasuryBalance);\n    const bondsReady = useSelector(selectBondsReady);\n\n    useEffect(() => {\n        if (networkID && bondsReady) {\n            dispatch(getBondMetrics({ networkID }));\n        }\n    }, [networkID, bondsReady]);\n\n    const ActiveBondList = useMemo(() => activeBonds.map(bond => <BondtListItem key={bond.ID} bondID={bond.ID} />), [activeBonds]);\n    const InactiveBondList = useMemo(() => inactiveBonds.map(bond => <BondtListItem key={bond.ID} bondID={bond.ID} />), [inactiveBonds]);\n\n    return (\n        <>\n            <BCard title={t('bond:MintTitle')} zoom={true}>\n                <Box>\n                    <Grid container item xs={12} spacing={2} mb={4}>\n                        <Grid item xs={12} sm={6}>\n                            <MenuMetric key={'treasuryBalance'} metricKey={t('TreasuryBalance')} value={treasuryBalance} />\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <MenuMetric key={'BashPrice'} metricKey={t('BASHPrice')} value={bashPrice} />\n                        </Grid>\n                    </Grid>\n                    <Grid container item>\n                        <BondHeader />\n\n                        {ActiveBondList}\n                    </Grid>\n                </Box>\n            </BCard>\n\n            <BCard title={t('bond:MintInactiveTitle')} zoom={true} className=\"BondList__card\">\n                <Box>\n                    <Grid container item>\n                        <BondHeader />\n                        {InactiveBondList}\n                    </Grid>\n                </Box>\n            </BCard>\n        </>\n    );\n}\n\nexport default BondList;\n"],"sourceRoot":""}