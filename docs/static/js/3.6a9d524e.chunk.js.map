{"version":3,"sources":["components/BCard/index.tsx","components/Metrics/MenuMetric.tsx","components/Metrics/InlineMetric.tsx","store/modules/metrics/metrics.selectors.ts","views/Staking/components/AmountForm/index.tsx","components/BMultiTab/BMultiTab.tsx","views/Dashboard/index.tsx","views/Staking/components/Metrics/index.tsx","store/modules/stake/stake.types.ts","views/Staking/components/RebaseTimer/index.tsx","store/modules/stake/stake.thunks.ts","views/Staking/components/StakeAction/index.tsx","views/Staking/components/StakeMetrics/index.tsx","views/Staking/components/UnstakeAction/index.tsx","views/Staking/components/UserBalance/index.tsx","views/Staking/index.tsx","views/Redeem/index.tsx","views/Forecast/components/Dashboard/components/DaysPicker/index.tsx","components/BInput/index.tsx","views/Forecast/components/Dashboard/components/ForecastConfiguration/index.tsx","views/Forecast/components/Dashboard/components/ForecastDetails/index.tsx","views/Forecast/components/Dashboard/components/ForecastDetails/helper.ts","views/Forecast/config.ts","views/Forecast/components/Dashboard/index.tsx","views/Forecast/components/Dashboard/components/ForecastMetrics/index.tsx","views/Forecast/index.tsx","views/404/index.tsx","views/Wrap/components/BalanceMetrics/index.tsx","store/modules/wrap/wrap.thunks.ts","views/Wrap/components/UnWrapAction/index.tsx","views/Wrap/components/WrapAction/index.tsx","views/Wrap/index.tsx","views/CriticalError/index.tsx","Root/App.tsx"],"names":["BCard","title","children","zoom","className","renderTitle","React","isValidElement","variant","sx","textTransform","card","padding","theme","spacing","breakpoints","up","margin","down","background","palette","cardBackground","main","backdropFilter","dark","color","primary","in","MenuMetric","metricKey","value","isMobile","useMediaQuery","display","flexDirection","alignItems","overflow","wordBreak","overflowX","undefined","width","MemoMenuMetric","useMemo","InlineMetric","t","useTranslation","justifyContent","p","xs","sm","light","fontSize","textAlign","isNil","MemoInlineMetric","selectStakingRebaseAmount","createSelector","state","staking","epoch","distribute","metrics","rawCircSupply","stakingReward","Decimal","toString","div","selectStakingRebasePercentage","amount","mul","selectStakingRewards","stakingRebase","fiveDayRate","Number","Math","pow","toNumber","toFixed","stakingAPY","add","selectTVL","selectCirculatingSupply","selectMarketPrice","circSupply","marketPrice","selectTotalBalance","dai","markets","balances","account","total","sum","Object","values","map","balance","formatUSDFromDecimal","selectFormattedMarketCap","totalSupply","reserves","formatUSD","selectWSBASHPrice","selectIndex","index","wsBashPrice","AmountForm","props","dispatch","useDispatch","initialValue","maxValue","transactionType","approvesNeeded","onApprove","onAction","approveLabel","actionLabel","isLoading","useState","setValue","pendingTransactions","useSelector","selectPendingTransactions","handleActionClick","useCallback","e","preventDefault","length","addNotification","severity","description","container","item","border","borderColor","borderRadius","outlineColor","borderRight","type","placeholder","onChange","target","inputProps","inputMode","pattern","endAdornment","position","cursor","onClick","disabled","maxWidth","whiteSpace","TabPanel","other","role","hidden","id","BMultiTabs","tabs","tabLabels","flatMap","label","borderBottom","centered","event","newValue","a11yProps","component","lazy","Dashboard","networkID","useWeb3Context","marketsLoading","selectMarketsLoading","bashPrice","selectFormattedReservePrice","wsPrice","marketCap","stakingRewards","TVL","currentIndex","selectFormattedIndex","treasuryBalance","selectFormattedTreasuryBalance","appIsLoading","selectAppLoading","bondTreasuryReady","selectTreasuryReady","selectFormattedBondCoreMetrics","rfv","rfvBASH","runway","useEffect","getTreasuryBalance","getBondMetrics","APYMetrics","name","formatAPY","DashboardItems","count","metric","timeout","key","lg","md","backgroundColor","px","py","flex","height","fallback","StakeMetrics","StakeTargetEnum","StakeActionEnum","stakingMetrics","BASHPrice","Grid","mt","RebaseTimer","nextRebase","useNextRebase","currentBlockTime","useBlockchainInfos","timestamp","timeUntilRebase","setTimeUntilRebase","formatTimer","Box","letterSpacing","Typography","time","Skeleton","stakeAction","createAsyncThunk","action","signer","signerAddress","getState","contracts","STAKING_HELPER_CONTRACT","STAKING_CONTRACT","getGasPrice","gasPrice","Error","transaction","stake","utils","parseUnits","unstake","addPendingTransaction","TransactionTypeEnum","STAKE_PENDING","hash","wait","messages","tx_successfully_send","metamaskErrorWrap","clearPendingTransaction","your_balance_update_soon","loadBalancesAndAllowances","your_balance_updated","approveContract","BASH_CONTRACT","SBASH_CONTRACT","targetContract","approve","constants","MaxUint256","approveTx","StakeCard","BASHBalance","selectBASHBalance","translactionPending","selectStakingPending","BASHAllowanceNeeded","selectUserStakingAllowance","useSafeSigner","handleStakingClick","STAKE","handleApproveClick","BASH_APPROVAL","UserStakeMetrics","selectFormattedStakeBalance","BASH","SBASH","userStakingMetrics","selectUserStakingInfos","keyMetrics","nextRewardValue","stakingRebasePercentage","optionalMetrics","effectiveNextRewardValue","i","UnStakeCard","SBASHBalance","selectSBASHBalance","SBASHAllowanceNeeded","handleUnstakingClick","UNSTAKE","SBASH_APPROVAL","UserBalance","totalBalance","stakingBalanceMetrics","selectStakingBalance","WSBashBalance","WSBASH","balanceItems","selectFormattedBashBalance","wrappedTokenValue","Staking","contractsLoaded","useContractLoaded","marginTop","BMultiTab","StakingLoader","accountsLoading","selectAccountLoading","Redeem","BSlider","styled","Slider","blue","DaysPicker","currentDay","minDays","maxDays","pb","mb","marginBottom","orientation","defaultValue","min","max","size","valueLabelDisplay","sliderValue","Array","isArray","MemoDaysPicker","BInput","endAdornmentLabel","extraSxProps","OutlinedInput","inputValue","InputAdornment","Configuration","onConfigurationChange","initialData","handleConfigurationChange","data","align","stakedSBAmount","rewardYieldPercent","BASHPriceAtPurchase","futureBASHMarketPrice","ForecastDetails","duration","initialPrice","dailyROI","computeDailyROI","bashRewardsEstimation","getBashRewardsEstimation","potentialReturn","getPotentialReturn","nbLambo","round","getLamboEstimation","computedForecast","Intl","NumberFormat","notation","maximumFractionDigits","format","fontWeight","noWrap","lambos","stakingPercentage","formData","setFormData","days","setDays","ForecastConfiguration","ForecastMetrics","Forecast","selectComputedMarketPrice","NotFound","bondsReady","selectBondInstances","Loader","WrapBalanceMetrics","selectBalancesInUSD","balanceMetrics","approveWrapContract","WSBASH_CONTRACT","address","WRAPPING_APPROVAL","getSigner","getAddress","wrapAction","WRAPPING","wrap","ethers","unwrap","parseEther","UnWrapAction","WSBASHAllowanceNeeded","selectWrappingPending","UNWRAPPING","WrapAction","Wrap","wrapMetrics","pt","CritialError","Stake","BondList","BondDialog","App","useContext","Web3Context","provider","useProvider","isSignerConnected","useSignerConnected","shallowEqual","errorEncountered","activeBondsIds","selectAllActiveBondsIds","coreMetricsLoading","selectMetricsLoading","bondCalcMetricsReady","selectBondDetailsCalcReady","bondMetrics","bonds","useLayoutEffect","initializeProviderContracts","batch","getBlockchainData","getCoreMetrics","getStakingMetrics","getMarketPrices","initializeBonds","bondID","loading","calcBondDetails","exact","path","bond","open"],"mappings":"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","file":"static/js/3.6a9d524e.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Box, Typography, Zoom } from '@mui/material';\n\nimport { theme } from 'constants/theme';\n\ninterface BCardProps {\n    title: string | JSX.Element;\n    children: React.ReactNode;\n    zoom: boolean;\n    className?: string;\n}\n\nexport const BCard = ({ title, children, zoom, className }: BCardProps) => {\n    const renderTitle = React.isValidElement(title) ? (\n        { title }\n    ) : (\n        <Typography variant=\"h4\" sx={{ textTransform: 'uppercase' }}>\n            {title}\n        </Typography>\n    );\n\n    const card = (\n        <Box\n            className={className}\n            sx={{\n                padding: theme.spacing(4),\n                [theme.breakpoints.up('xs')]: {\n                    margin: '.5rem',\n                },\n                [theme.breakpoints.down('xs')]: {\n                    margin: '1rem',\n                },\n                '@supports (-webkit-backdrop-filter: none) or (backdrop-filter: none)': {\n                    background: theme.palette.cardBackground.main,\n                    backdropFilter: 'blur(100px)',\n                },\n\n                '@supports not ((-webkit-backdrop-filter: none) or (backdrop-filter: none))': {\n                    background: theme.palette.cardBackground.dark,\n                    backdropFilter: 'blur(100px)',\n                },\n            }}\n        >\n            <Box sx={{ color: theme.palette.primary.main }}>\n                <>{renderTitle}</>\n            </Box>\n            {children}\n        </Box>\n    );\n\n    return zoom ? (\n        <>\n            <Zoom in={false}>\n                <>{card}</>\n            </Zoom>\n        </>\n    ) : (\n        card\n    );\n};\n","import { useMemo } from 'react';\n\nimport { Box, Skeleton, Typography, useMediaQuery } from '@mui/material';\n\nimport { theme } from 'constants/theme';\n\nexport const MenuMetric = ({ metricKey, value }: { metricKey: string; value: unknown | null }) => {\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    return (\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: isMobile ? 'left' : 'center' }}>\n            <Typography variant=\"body2\" sx={{ color: theme.palette.primary.dark }}>\n                {metricKey}\n            </Typography>\n            <Typography variant=\"h5\" sx={{ overflow: 'hidden', wordBreak: 'break-all', overflowX: 'hidden', color: theme.palette.primary.main }}>\n                {value === undefined ? <Skeleton sx={{ width: '100%' }} /> : <>{value}</>}\n            </Typography>\n        </Box>\n    );\n};\n\nconst MemoMenuMetric = ({ metricKey, value }: { metricKey: string; value: unknown | null }) => {\n    return useMemo(() => {\n        return <MenuMetric {...{ metricKey, value }} />;\n    }, [metricKey, value]);\n};\n\nexport default MemoMenuMetric;\n","import { useMemo } from 'react';\n\nimport { Box, Skeleton, Typography } from '@mui/material';\nimport { isNil } from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport { theme } from 'constants/theme';\n\nconst InlineMetric = ({ metricKey, value }: { metricKey: string; value: unknown | null | undefined }) => {\n    const { t } = useTranslation();\n\n    return (\n        <Box\n            key={metricKey}\n            sx={{\n                display: 'inline-flex',\n                width: '100%',\n                justifyContent: 'space-between',\n                p: {\n                    xs: 0.5,\n                    sm: 0.75,\n                },\n                color: theme.palette.primary.light,\n                [theme.breakpoints.up('xs')]: { fontSize: '.8rem' },\n                [theme.breakpoints.up('sm')]: { fontSize: '1.3rem' },\n            }}\n        >\n            <Typography\n                variant=\"body1\"\n                sx={{\n                    width: '60%',\n                }}\n            >\n                <>{t(metricKey)}</>\n            </Typography>\n            <Typography variant=\"body1\" sx={{ width: '40%', textAlign: 'right' }}>\n                {isNil(value) ? <Skeleton sx={{ width: '100%' }} /> : <>{value}</>}\n            </Typography>\n        </Box>\n    );\n};\n\nconst MemoInlineMetric = ({ metricKey, value }: { metricKey: string; value: unknown | null | undefined }) =>\n    useMemo(() => <InlineMetric {...{ metricKey, value }} />, [metricKey, value]);\n\nexport default MemoInlineMetric;\n","import { createSelector } from '@reduxjs/toolkit';\nimport Decimal from 'decimal.js';\n\nimport { formatUSD, formatUSDFromDecimal } from 'helpers/price-units';\nimport { IReduxState } from 'store/slices/state.interface';\nimport { RootState } from 'store/store';\n\nimport { selectCirculatingSupply } from '../app/app.selectors';\nimport { selectMarketPrice } from '../markets/markets.selectors';\nimport { selectIndex } from '../stake/stake.selectors';\n\nexport const selectRawCircSupply = (state: IReduxState) => state.main.metrics.rawCircSupply;\nexport const selectStakingReward = (state: IReduxState) => state.main.staking.epoch?.distribute || null;\nexport const selectMetricsLoading = (state: IReduxState) => state.main.metrics.loading;\n\nexport const selectStakingRebaseAmount = createSelector([selectStakingReward, selectRawCircSupply], (stakingReward, rawCircSupply) => {\n    if (!rawCircSupply || !stakingReward) return null;\n\n    return new Decimal(stakingReward.toString()).div(new Decimal(rawCircSupply.toString())); // rewardYield rate for this epoch\n});\n\nexport const selectStakingRebasePercentage = createSelector([selectStakingRebaseAmount], amount => {\n    return (amount || new Decimal(0)).mul(100);\n});\n\nexport const selectStakingRewards = createSelector([selectStakingRebaseAmount], stakingRebase => {\n    if (stakingRebase === null) return null;\n\n    const fiveDayRate = Number(Math.pow(1 + stakingRebase.toNumber(), 5 * 3).toFixed(5)) - 1;\n    const stakingAPY = Number(Decimal.pow(stakingRebase.add(1), 365 * 3).toFixed(5)) - 1;\n\n    return {\n        fiveDayRate, // 3 epoch/day\n        stakingAPY,\n        stakingReward: stakingRebase.toNumber(),\n        stakingRebase,\n    };\n});\n\nexport const selectTVL = createSelector([selectCirculatingSupply, selectMarketPrice], (circSupply, marketPrice) => {\n    if (!circSupply || !marketPrice) return null;\n\n    return new Decimal(circSupply.toString()).mul(new Decimal(marketPrice.toString()).div(Math.pow(10, 9)));\n});\n\nexport const selectTotalBalance = (state: RootState): string => {\n    const { dai } = state.markets.markets;\n    const balances = state.account.balances;\n\n    const total = Decimal.sum(\n        ...Object.values(balances).map(balance =>\n            new Decimal(balance.toString())\n                .div(10 ** 9)\n                .mul(dai ?? 0)\n                .toNumber(),\n        ),\n    );\n\n    return formatUSDFromDecimal(total, 2);\n};\n\nexport const selectFormattedMarketCap = (state: RootState): string | null => {\n    const { totalSupply, reserves } = state.main.metrics;\n\n    if (!totalSupply || !reserves) return null;\n\n    return formatUSD(totalSupply * reserves.div(10 ** 9).toNumber(), 2);\n};\n\nexport const selectWSBASHPrice = createSelector([selectIndex, selectMarketPrice], (index, marketPrice) => {\n    if (!marketPrice || !index) return null;\n\n    const wsBashPrice = new Decimal(index.toString()).mul(marketPrice).div(10 ** 18);\n\n    return formatUSDFromDecimal(wsBashPrice, 2);\n});\n","import { useCallback, useState, MouseEvent, ChangeEvent } from 'react';\n\nimport { Box, Button, CircularProgress, Grid, InputAdornment, OutlinedInput, Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { theme } from 'constants/theme';\nimport { addNotification } from 'store/modules/messages/messages.slice';\nimport { selectPendingTransactions } from 'store/modules/transactions/transactions.selectors';\nimport { TransactionType } from 'store/modules/transactions/transactions.type';\n\ninterface AmountFormProps {\n    initialValue: number;\n    maxValue: number;\n    transactionType: TransactionType;\n    approvesNeeded: boolean;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onApprove: any;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onAction: any;\n    approveLabel: string;\n    actionLabel: string;\n    isLoading?: boolean;\n}\n\nconst AmountForm = (props: AmountFormProps) => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { initialValue, maxValue, transactionType, approvesNeeded, onApprove, onAction, approveLabel, actionLabel, isLoading } = props;\n\n    const [value, setValue] = useState<string>('');\n    const pendingTransactions = useSelector(selectPendingTransactions);\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setValue(e.target.value);\n    };\n\n    const handleClickMaxValue = () => {\n        setValue(maxValue.toString());\n    };\n\n    const handleActionClick = useCallback(\n        (e: MouseEvent) => {\n            e.preventDefault();\n\n            if (pendingTransactions.length > 0) return;\n\n            if (approvesNeeded) {\n                return onApprove(transactionType);\n            }\n\n            if (value === '0') {\n                return dispatch(addNotification({ severity: 'warning', description: 'Please provide an amount' }));\n            }\n\n            return onAction(value);\n        },\n        [onApprove, onAction, value, transactionType],\n    );\n\n    return (\n        <Grid container>\n            <Grid item xs={10}>\n                <OutlinedInput\n                    sx={{\n                        color: theme.palette.primary.main,\n                        border: '1px solid',\n                        borderColor: theme.palette.primary.main,\n                        borderRadius: 0,\n                        outlineColor: theme.palette.primary.main,\n                        borderRight: 'none',\n                        width: '100%',\n                    }}\n                    type=\"number\"\n                    placeholder={initialValue.toString()}\n                    value={value}\n                    onChange={handleChange}\n                    inputProps={{ inputMode: 'numeric', pattern: '^[0-9]*[.,]?[0-9]*$' }}\n                    endAdornment={\n                        <InputAdornment position=\"end\">\n                            <Box sx={{ color: theme.palette.primary.main, textTransform: 'uppercase', cursor: 'pointer' }} onClick={handleClickMaxValue}>\n                                <Typography>\n                                    <>{t('Max')}</>\n                                </Typography>\n                            </Box>\n                        </InputAdornment>\n                    }\n                />\n            </Grid>\n            <Grid item xs={2} p={0}>\n                <Button\n                    sx={{\n                        padding: 0,\n                        color: theme.palette.primary.main,\n                    }}\n                    disabled={isLoading}\n                    onClick={handleActionClick}\n                >\n                    {isLoading && <CircularProgress color=\"secondary\" />}\n\n                    {!isLoading && (\n                        <Typography\n                            variant=\"body1\"\n                            sx={{\n                                [theme.breakpoints.down('sm')]: {\n                                    maxWidth: '9ch',\n                                    padding: 0,\n                                    overflow: 'hidden',\n                                    fontSize: '.5rem',\n                                    whiteSpace: 'nowrap',\n                                },\n                            }}\n                        >\n                            {' '}\n                            {approvesNeeded ? approveLabel : actionLabel}\n                        </Typography>\n                    )}\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default AmountForm;\n","import { ReactNode, SyntheticEvent, useState } from 'react';\n\nimport { Box, Tab, Tabs } from '@mui/material';\n\nimport { theme } from 'constants/theme';\n\ninterface TabItem {\n    label: string;\n    component: JSX.Element;\n}\n\ninterface MultiTabProps {\n    tabs: TabItem[];\n}\n\ninterface TabPanelProps {\n    children?: ReactNode;\n    index: number;\n    value: number;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`bmultitab-tabpanel-${index}`} aria-labelledby={`bmultitab-tab-${index}`} {...other}>\n            <Box\n                sx={{\n                    [theme.breakpoints.up('md')]: { padding: 3 },\n                    [theme.breakpoints.down('md')]: { padding: 0 },\n                }}\n            >\n                {children}\n            </Box>\n        </div>\n    );\n};\n\nconst a11yProps = (index: number) => {\n    return {\n        id: `bmultitab-tab-${index}`,\n        'aria-controls': `bmultitab-tabpanel-${index}`,\n        sx: {\n            color: 'white',\n        },\n    };\n};\n\nexport const BMultiTabs = ({ tabs }: MultiTabProps) => {\n    const [value, setValue] = useState(0);\n\n    const handleChange = (event: SyntheticEvent, newValue: number) => {\n        event.preventDefault();\n        setValue(newValue || 0);\n    };\n\n    const tabLabels = tabs.flatMap(({ label }) => label);\n\n    return (\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs centered value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n                {tabLabels.map((label, index) => (\n                    <Tab key={index} value={index} label={<>{label}</>} {...a11yProps(0)} />\n                ))}\n            </Tabs>\n\n            {tabs.map(({ component }, index) => (\n                <TabPanel key={index} value={value} index={index}>\n                    {component}\n                </TabPanel>\n            ))}\n        </Box>\n    );\n};\n","import { lazy, Suspense, useEffect } from 'react';\n\nimport { Box, Grow } from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Loading from 'components/Loader';\nimport { theme } from 'constants/theme';\nimport { useWeb3Context } from 'contexts/web3/web3.context';\nimport { formatAPY, formatUSDFromDecimal } from 'helpers/price-units';\nimport { selectAppLoading, selectFormattedReservePrice } from 'store/modules/app/app.selectors';\nimport { selectFormattedBondCoreMetrics, selectFormattedTreasuryBalance, selectTreasuryReady } from 'store/modules/bonds/bonds.selector';\nimport { getBondMetrics, getTreasuryBalance } from 'store/modules/bonds/bonds.thunks';\nimport { selectMarketsLoading } from 'store/modules/markets/markets.selectors';\nimport { selectFormattedMarketCap, selectStakingRewards, selectTVL, selectWSBASHPrice } from 'store/modules/metrics/metrics.selectors';\nimport { selectFormattedIndex } from 'store/modules/stake/stake.selectors';\n\nimport './dashboard.scss';\n\nconst MenuMetric = lazy(() => import('components/Metrics/MenuMetric'));\n\nfunction Dashboard() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const {\n        state: { networkID },\n    } = useWeb3Context();\n\n    const marketsLoading = useSelector(selectMarketsLoading);\n    const bashPrice = useSelector(selectFormattedReservePrice);\n    const wsPrice = useSelector(selectWSBASHPrice);\n    const marketCap = useSelector(selectFormattedMarketCap);\n    const stakingRewards = useSelector(selectStakingRewards);\n    const TVL = useSelector(selectTVL);\n    const currentIndex = useSelector(selectFormattedIndex);\n    const treasuryBalance = useSelector(selectFormattedTreasuryBalance);\n    const appIsLoading = useSelector(selectAppLoading);\n    const bondTreasuryReady = useSelector(selectTreasuryReady);\n    const { rfv, rfvBASH, runway } = useSelector(selectFormattedBondCoreMetrics);\n\n    useEffect(() => {\n        if (!appIsLoading && networkID) dispatch(getTreasuryBalance({ networkID }));\n    }, [networkID, appIsLoading]);\n\n    useEffect(() => {\n        if (bondTreasuryReady && networkID) dispatch(getBondMetrics({ networkID }));\n    }, [networkID, bondTreasuryReady]);\n\n    if (appIsLoading) return <Loading />;\n\n    const APYMetrics = stakingRewards\n        ? [\n              { name: 'APY', value: stakingRewards ? formatAPY(stakingRewards.stakingAPY.toString()) : null },\n              { name: 'CurrentIndex', value: currentIndex },\n              { name: 'wsBASHPrice', value: wsPrice },\n          ]\n        : [];\n\n    const DashboardItems = [\n        { name: 'BashPrice', value: bashPrice },\n        { name: 'MarketCap', value: marketCap },\n        { name: 'TVL', value: TVL ? formatUSDFromDecimal(TVL, 2) : 0 },\n        { name: 'TreasuryBalance', value: treasuryBalance },\n\n        ...APYMetrics,\n        { name: 'RiskFreeValue', value: rfv },\n        { name: 'RiskFreeValuewsBASH', value: rfvBASH },\n        { name: 'Runway', value: t('common:day', { count: Number(runway) }) },\n    ];\n\n    return (\n        <Box>\n            <Grid container spacing={6} sx={{ p: 2 }} justifyContent=\"space-around\">\n                {DashboardItems.map(metric => (\n                    <Grow in={!marketsLoading} {...(!marketsLoading ? { timeout: 1000 } : {})} key={`dashboard-item-${metric.name}`}>\n                        <Grid item lg={6} md={6} sm={6} xs={12}>\n                            <Box\n                                className=\"Dashboard__box__item\"\n                                sx={{\n                                    backgroundColor: theme.palette.cardBackground.main,\n                                    backdropFilter: 'blur(100px)',\n                                    borderRadius: '.5rem',\n                                    color: theme.palette.primary.main,\n                                    px: theme.spacing(2),\n                                    py: theme.spacing(4),\n                                    textAlign: 'center',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                    display: 'flex',\n                                    flex: '1 1 auto',\n                                    overflow: 'auto',\n                                    flexDirection: 'column',\n                                    height: '100%',\n                                }}\n                            >\n                                <Suspense fallback={<Loading />}>\n                                    <MenuMetric metricKey={t(metric.name)} value={metric.value} />\n                                </Suspense>\n                            </Box>\n                        </Grid>\n                    </Grow>\n                ))}\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Dashboard;\n","import { Grid } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport MenuMetric from 'components/Metrics/MenuMetric';\nimport { formatAPY, formatUSDFromDecimal } from 'helpers/price-units';\nimport { selectFormattedReservePrice } from 'store/modules/app/app.selectors';\nimport { selectStakingRewards, selectTVL } from 'store/modules/metrics/metrics.selectors';\nimport { selectFormattedIndex } from 'store/modules/stake/stake.selectors';\n\nfunction StakeMetrics() {\n    const stakingMetrics = useSelector(selectStakingRewards);\n    const TVL = useSelector(selectTVL);\n    const BASHPrice = useSelector(selectFormattedReservePrice);\n    const currentIndex = useSelector(selectFormattedIndex);\n\n    const { t } = useTranslation();\n\n    const metrics = [\n        { key: 'APY', value: stakingMetrics?.stakingAPY ? `${formatAPY(stakingMetrics.stakingAPY.toString())}` : null },\n        { key: 'TVL', value: TVL ? formatUSDFromDecimal(TVL) : null },\n        { key: 'CurrentIndex', value: currentIndex },\n        { key: 'BASHPrice', value: BASHPrice },\n    ].map(({ key, value }) => (\n        <Grid item key={key} xs={6} sm={4} md={4} lg={3} mt={2}>\n            <MenuMetric metricKey={t(key)} value={value} />\n        </Grid>\n    ));\n\n    return (\n        <Grid container spacing={2}>\n            {metrics}\n        </Grid>\n    );\n}\n\nexport default StakeMetrics;\n","export enum StakeTargetEnum {\n    'BASH' = 'BASH',\n    'SBASH' = 'SBASH',\n}\n\nexport enum StakeActionEnum {\n    STAKE = 'STAKE',\n    UNSTAKE = 'UNSTAKE',\n}\n\nexport interface ChangeStakeOptions {\n    action: StakeActionEnum;\n    amount: number;\n}\n","import { useState, useEffect } from 'react';\n\nimport { Box, Skeleton, Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport { theme } from 'constants/theme';\nimport { formatTimer } from 'helpers/prettify-seconds';\nimport { useBlockchainInfos, useNextRebase } from 'store/modules/app/app.selectors';\n\nconst RebaseTimer = () => {\n    const { t } = useTranslation();\n\n    const nextRebase = useSelector(useNextRebase);\n    const { timestamp: currentBlockTime } = useSelector(useBlockchainInfos);\n\n    const [timeUntilRebase, setTimeUntilRebase] = useState<string | null>(null);\n\n    useEffect(() => {\n        if (currentBlockTime && nextRebase) {\n            if (currentBlockTime < nextRebase) {\n                setTimeUntilRebase(formatTimer(currentBlockTime, nextRebase, t));\n            }\n        }\n    }, [currentBlockTime, nextRebase]);\n\n    if (!currentBlockTime || !nextRebase) return <Skeleton />;\n\n    return (\n        <Box sx={{ color: theme.palette.primary.main, textTransform: 'uppercase', letterSpacing: 2 }}>\n            <Typography>\n                <>{timeUntilRebase ? t('TimeToNextRebase', { time: timeUntilRebase }) : t('Rebasing')}</>\n            </Typography>\n        </Box>\n    );\n};\n\nexport default RebaseTimer;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { constants, utils, providers } from 'ethers';\n\nimport { messages } from 'constants/messages';\nimport { metamaskErrorWrap } from 'helpers/networks/metamask-error-wrap';\nimport { addNotification } from 'store/modules/messages/messages.slice';\n// import { fetchPendingTxns, getStakingTypeText, clearPendingTxn, getPendingActionText } from 'store/slices/pending-txns-slice';\nimport { IReduxState } from 'store/slices/state.interface';\n\nimport { loadBalancesAndAllowances } from '../account/account.thunks';\nimport { addPendingTransaction, clearPendingTransaction } from '../transactions/transactions.slice';\nimport { TransactionType, TransactionTypeEnum } from '../transactions/transactions.type';\nimport { ChangeStakeOptions } from './stake.types';\n\nexport const stakeAction = createAsyncThunk(\n    'staking/staking',\n    async ({ action, amount, signer, signerAddress }: ChangeStakeOptions & { signer: providers.Web3Provider; signerAddress: string }, { dispatch, getState }) => {\n        const {\n            main: {\n                contracts: { STAKING_HELPER_CONTRACT, STAKING_CONTRACT },\n            },\n        } = getState() as IReduxState;\n\n        const gasPrice = await signer.getGasPrice();\n\n        if (!STAKING_CONTRACT || !STAKING_HELPER_CONTRACT) throw new Error('Unable to get contracts');\n\n        let transaction = undefined;\n\n        try {\n            transaction =\n                action === 'STAKE'\n                    ? await STAKING_HELPER_CONTRACT.stake(utils.parseUnits(amount.toString(), 'gwei'), signerAddress, { gasPrice })\n                    : await STAKING_CONTRACT.unstake(utils.parseUnits(amount.toString(), 'gwei'), true, { gasPrice });\n\n            dispatch(addPendingTransaction({ type: TransactionTypeEnum.STAKE_PENDING, hash: transaction.hash }));\n\n            await transaction.wait();\n\n            dispatch(addNotification({ severity: 'success', description: messages.tx_successfully_send }));\n        } catch (err: unknown) {\n            metamaskErrorWrap(err, dispatch);\n        } finally {\n            dispatch(clearPendingTransaction(TransactionTypeEnum.STAKE_PENDING));\n        }\n\n        dispatch(addNotification({ severity: 'info', description: messages.your_balance_update_soon }));\n\n        dispatch(loadBalancesAndAllowances(signerAddress));\n\n        dispatch(addNotification({ severity: 'info', description: messages.your_balance_updated }));\n    },\n);\n\nexport const approveContract = createAsyncThunk(\n    'staking/approve',\n    async ({ signer, signerAddress, transactionType }: { signer: providers.Web3Provider; signerAddress: string; transactionType: TransactionType }, { getState, dispatch }) => {\n        const {\n            main: {\n                contracts: { BASH_CONTRACT, SBASH_CONTRACT },\n            },\n        } = getState() as IReduxState;\n\n        if (!BASH_CONTRACT || !SBASH_CONTRACT) {\n            throw new Error('Contract not set');\n        }\n        const gasPrice = await signer.getGasPrice();\n\n        try {\n            const targetContract = transactionType === 'BASH_APPROVAL' ? BASH_CONTRACT : SBASH_CONTRACT;\n\n            const approveTx = await targetContract.approve(signerAddress, constants.MaxUint256, { gasPrice });\n            dispatch(addPendingTransaction({ type: transactionType, hash: approveTx.hash }));\n            await approveTx.wait();\n        } catch (err) {\n            metamaskErrorWrap(err, dispatch);\n        } finally {\n            dispatch(clearPendingTransaction(transactionType));\n        }\n\n        dispatch(loadBalancesAndAllowances(signerAddress));\n    },\n);\n","import { useCallback } from 'react';\n\nimport { t } from 'i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useSafeSigner } from 'contexts/web3/web3.hooks';\nimport { selectBASHBalance, selectUserStakingAllowance } from 'store/modules/account/account.selectors';\nimport { approveContract, stakeAction } from 'store/modules/stake/stake.thunks';\nimport { StakeActionEnum } from 'store/modules/stake/stake.types';\nimport { selectStakingPending } from 'store/modules/transactions/transactions.selectors';\nimport { TransactionType, TransactionTypeEnum } from 'store/modules/transactions/transactions.type';\nimport AmountForm from 'views/Staking/components/AmountForm';\n\nconst StakeCard = () => {\n    const dispatch = useDispatch();\n\n    const BASHBalance = useSelector(selectBASHBalance);\n\n    const translactionPending = useSelector(selectStakingPending);\n    const { BASHAllowanceNeeded } = useSelector(selectUserStakingAllowance);\n    const { signer, signerAddress } = useSafeSigner();\n\n    const handleStakingClick = useCallback((amount: number) => {\n        return dispatch(stakeAction({ action: StakeActionEnum.STAKE, amount, signer, signerAddress }));\n    }, []);\n\n    const handleApproveClick = useCallback(\n        (transactionType: TransactionType) => {\n            dispatch(approveContract({ signer, signerAddress, transactionType }));\n        },\n        [signer],\n    );\n\n    return (\n        <AmountForm\n            initialValue={0}\n            maxValue={BASHBalance.toNumber()}\n            transactionType={TransactionTypeEnum.BASH_APPROVAL}\n            approvesNeeded={BASHAllowanceNeeded}\n            onApprove={handleApproveClick}\n            onAction={handleStakingClick}\n            approveLabel={t('stake:ApproveStaking')}\n            actionLabel={t('stake:Stake')}\n            isLoading={translactionPending}\n        />\n    );\n};\n\nexport { StakeCard };\n","import { Typography, Box } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport MemoInlineMetric from 'components/Metrics/InlineMetric';\nimport { theme } from 'constants/theme';\nimport { selectFormattedStakeBalance } from 'store/modules/account/account.selectors';\nimport { selectUserStakingInfos } from 'store/modules/app/app.selectors';\n\nconst UserStakeMetrics = () => {\n    const { t } = useTranslation();\n\n    const { BASH, SBASH } = useSelector(selectFormattedStakeBalance);\n    const userStakingMetrics = useSelector(selectUserStakingInfos);\n\n    const keyMetrics = [\n        { key: 'YourBalance', value: BASH },\n        { key: 'stake:YourStakedBalance', value: SBASH },\n        { key: 'stake:NextRewardAmount', value: userStakingMetrics.nextRewardValue },\n        { key: 'stake:NextRewardYield', value: userStakingMetrics.stakingRebasePercentage },\n        { key: 'stake:ROIFiveDayRate', value: userStakingMetrics.fiveDayRate },\n    ];\n\n    const optionalMetrics = [{ key: 'stake:EffectiveNextRewardAmount', value: userStakingMetrics.effectiveNextRewardValue }];\n\n    const metrics = [...keyMetrics, ...(userStakingMetrics.optionalMetrics ? optionalMetrics : [])].map(({ key: metricKey, value }, i) => (\n        <MemoInlineMetric key={`metric-${i}`} {...{ metricKey, value }} />\n    ));\n\n    return (\n        <Box>\n            <Typography variant=\"h4\" sx={{ color: theme.palette.primary.light }}>\n                <>{t('stake:StakingMetrics')} </>\n            </Typography>\n\n            {metrics}\n        </Box>\n    );\n};\n\nexport default UserStakeMetrics;\n","import { useCallback } from 'react';\n\nimport { t } from 'i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useSafeSigner } from 'contexts/web3/web3.hooks';\nimport { selectSBASHBalance, selectUserStakingAllowance } from 'store/modules/account/account.selectors';\nimport { approveContract, stakeAction } from 'store/modules/stake/stake.thunks';\nimport { StakeActionEnum } from 'store/modules/stake/stake.types';\nimport { selectStakingPending } from 'store/modules/transactions/transactions.selectors';\nimport { TransactionType, TransactionTypeEnum } from 'store/modules/transactions/transactions.type';\nimport AmountForm from 'views/Staking/components/AmountForm';\n\nconst UnStakeCard = () => {\n    const dispatch = useDispatch();\n\n    const SBASHBalance = useSelector(selectSBASHBalance);\n\n    const translactionPending = useSelector(selectStakingPending);\n    const { SBASHAllowanceNeeded } = useSelector(selectUserStakingAllowance);\n    const { signer, signerAddress } = useSafeSigner();\n\n    const handleApproveClick = useCallback(\n        (transactionType: TransactionType) => {\n            dispatch(approveContract({ signer, signerAddress, transactionType }));\n        },\n        [signer],\n    );\n\n    const handleUnstakingClick = useCallback((amount: number) => {\n        return dispatch(stakeAction({ action: StakeActionEnum.UNSTAKE, amount, signer, signerAddress }));\n    }, []);\n\n    return (\n        <AmountForm\n            initialValue={SBASHBalance.toNumber()}\n            maxValue={SBASHBalance.toNumber()}\n            transactionType={TransactionTypeEnum.SBASH_APPROVAL}\n            approvesNeeded={SBASHAllowanceNeeded}\n            onApprove={handleApproveClick}\n            onAction={handleUnstakingClick}\n            approveLabel={t('stake:ApproveUnstaking')}\n            actionLabel={t('stake:Unstake')}\n            isLoading={translactionPending}\n        />\n    );\n};\n\nexport { UnStakeCard };\n","import { Box, Typography, useMediaQuery } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport MemoInlineMetric from 'components/Metrics/InlineMetric';\nimport { theme } from 'constants/theme';\nimport { selectFormattedStakeBalance } from 'store/modules/account/account.selectors';\nimport { selectFormattedBashBalance } from 'store/modules/markets/markets.selectors';\nimport { selectTotalBalance } from 'store/modules/metrics/metrics.selectors';\nimport { selectStakingBalance } from 'store/modules/stake/stake.selectors';\n\nconst UserBalance = () => {\n    const { t } = useTranslation();\n\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const totalBalance = useSelector(selectTotalBalance);\n    const stakingBalanceMetrics = useSelector(selectStakingBalance);\n    const { WSBASH: WSBashBalance } = useSelector(selectFormattedStakeBalance);\n\n    const BASHPrice = useSelector(selectFormattedBashBalance);\n\n    const userBalances = [\n        { key: 'stake:ValueOfYourBASH', value: BASHPrice },\n        { key: 'stake:ValueOfYourStakedBASH', value: WSBashBalance },\n        { key: 'stake:ValueOfYourNextRewardAmount', value: stakingBalanceMetrics.wrappedTokenValue },\n        { key: 'stake:ValueOfYourEffectiveNextRewardAmount', value: stakingBalanceMetrics.effectiveNextRewardValue },\n    ];\n\n    const balanceItems = userBalances.map(({ key, value }) => <MemoInlineMetric key={key} metricKey={key} value={value} />);\n\n    return (\n        <>\n            <Box sx={{ display: 'inline-flex', width: '100%', justifyContent: 'space-between', alignItems: 'center', color: theme.palette.primary.light }}>\n                <Typography variant={isMobile ? 'h5' : 'h4'}>\n                    <>{t('YourBalance')}</>\n                </Typography>\n                <Typography variant=\"h4\">\n                    <> {totalBalance}</>\n                </Typography>\n            </Box>\n\n            {balanceItems}\n        </>\n    );\n};\n\nexport default UserBalance;\n","import { useEffect } from 'react';\n\nimport { Box } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { BCard } from 'components/BCard';\nimport { BMultiTabs } from 'components/BMultiTab/BMultiTab';\nimport Loading from 'components/Loader';\nimport { theme } from 'constants/theme';\nimport { useSafeSigner } from 'contexts/web3/web3.hooks';\nimport { selectAccountLoading } from 'store/modules/account/account.selectors';\nimport { loadBalancesAndAllowances } from 'store/modules/account/account.thunks';\nimport { useContractLoaded } from 'store/modules/app/app.selectors';\nimport { selectStakingRewards } from 'store/modules/metrics/metrics.selectors';\n\nimport StakeMetrics from './components/Metrics';\nimport RebaseTimer from './components/RebaseTimer';\nimport { StakeCard } from './components/StakeAction';\nimport UserStakeMetrics from './components/StakeMetrics';\nimport { UnStakeCard } from './components/UnstakeAction';\nimport UserBalance from './components/UserBalance';\n\nimport './staking.scss';\n\nconst Staking = () => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { signerAddress } = useSafeSigner();\n\n    const contractsLoaded = useSelector(useContractLoaded);\n\n    useEffect(() => {\n        if (signerAddress && contractsLoaded) {\n            dispatch(loadBalancesAndAllowances(signerAddress));\n        }\n    }, [signerAddress, contractsLoaded]);\n\n    const tabs = [\n        { label: t('stake:Stake'), component: <StakeCard /> },\n        { label: t('stake:Unstake'), component: <UnStakeCard /> },\n    ];\n\n    return (\n        <>\n            <BCard zoom title={t('stake:StakeTitle')}>\n                <Box sx={{ color: theme.palette.primary.main }}>\n                    <RebaseTimer />\n                </Box>\n\n                <Box sx={{ marginTop: theme.spacing(4) }}>\n                    <StakeMetrics />\n                </Box>\n                <Box sx={{ marginTop: theme.spacing(4) }}>\n                    <BMultiTabs tabs={tabs} />\n                </Box>\n                <Box sx={{ marginTop: theme.spacing(4) }}>\n                    <UserStakeMetrics />\n                </Box>\n            </BCard>\n\n            <BCard zoom title=\"\" className=\"Staking__userBalance\">\n                <UserBalance />\n            </BCard>\n        </>\n    );\n};\n\nconst StakingLoader = () => {\n    const accountsLoading = useSelector(selectAccountLoading);\n    const stakingMetrics = useSelector(selectStakingRewards);\n\n    if (accountsLoading || !stakingMetrics) return <Loading />;\n\n    return <Staking />;\n};\n\nexport default StakingLoader;\n","import { Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\nimport { BCard } from 'components/BCard';\n\nfunction Redeem() {\n    const { t } = useTranslation();\n\n    return (\n        <BCard title={t('bond:Redeem')} zoom={true}>\n            <Typography>\n                <> {t('ComingSoon')}</>\n            </Typography>\n        </BCard>\n    );\n}\n\nexport default Redeem;\n","import { useMemo } from 'react';\n\nimport { Slider, Box, Typography, styled, useMediaQuery } from '@mui/material';\nimport { blue } from '@mui/material/colors';\nimport { useTranslation } from 'react-i18next';\n\nimport { theme } from 'constants/theme';\n\ninterface DaysPickerProps {\n    currentDay: number;\n    onChange: (value: number) => void;\n    minDays: number;\n    maxDays: number;\n}\n\nconst BSlider = styled(Slider)({\n    color: blue[600],\n});\n\nconst DaysPicker = ({ currentDay, onChange, minDays, maxDays }: DaysPickerProps) => {\n    const { t } = useTranslation();\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const handleChange = (event: Event, sliderValue: number | Array<number>) => {\n        event.preventDefault();\n        onChange(Array.isArray(sliderValue) ? sliderValue[0] : sliderValue);\n    };\n\n    return (\n        <Box\n            height={'90%'}\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                [theme.breakpoints.up('xs')]: {\n                    width: '100%',\n                    marginTop: '1rem',\n                },\n            }}\n            pb={theme.spacing(2)}\n        >\n            <Typography\n                variant=\"body1\"\n                color={theme.palette.primary.light}\n                mb={theme.spacing(2)}\n                sx={{\n                    [theme.breakpoints.up('xs')]: {\n                        marginBottom: 0,\n                    },\n                }}\n            >\n                {t('common:day_other', { count: currentDay })}\n            </Typography>\n            <BSlider\n                orientation={isMobile ? 'horizontal' : 'vertical'}\n                defaultValue={20}\n                value={currentDay}\n                min={minDays}\n                max={maxDays}\n                size={'medium'}\n                valueLabelDisplay=\"auto\"\n                onChange={handleChange}\n            />\n        </Box>\n    );\n};\n\nconst MemoDaysPicker = ({ currentDay, ...props }: DaysPickerProps) => useMemo(() => <DaysPicker currentDay={currentDay} {...props} />, [currentDay]);\n\nexport default MemoDaysPicker;\n","import { ChangeEvent, SyntheticEvent, useState } from 'react';\n\nimport { OutlinedInput, InputAdornment, Box, Typography, SxProps, Theme } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\nimport { theme } from 'constants/theme';\n\ninterface BInputProps {\n    name: string;\n    defaultValue: string;\n    onChange: (value: Record<string, string>) => void;\n    maxValue?: string;\n    placeholder?: string;\n    endAdornmentLabel?: string;\n    extraSxProps?: SxProps<Theme> | undefined;\n}\n\nconst BInput = ({ name, defaultValue, maxValue, onChange, endAdornmentLabel, placeholder, extraSxProps }: BInputProps) => {\n    const { t } = useTranslation();\n    const [value, setValue] = useState(defaultValue);\n\n    const handleClickMaxValue = (event: SyntheticEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        setValue(maxValue ?? defaultValue);\n    };\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const inputValue = event.target.value;\n\n        setValue(inputValue);\n        onChange({ [name]: inputValue });\n    };\n\n    return (\n        <OutlinedInput\n            sx={{\n                color: theme.palette.primary.main,\n                border: '1px solid',\n                borderColor: theme.palette.primary.main,\n                borderRadius: 0,\n                outlineColor: theme.palette.primary.main,\n                width: '100%',\n                ...(extraSxProps ?? {}),\n            }}\n            name={name}\n            type=\"number\"\n            placeholder={placeholder}\n            value={value}\n            onChange={handleInputChange}\n            inputProps={{ inputMode: 'numeric', pattern: '^[0-9]*[.,]?[0-9]*$' }}\n            endAdornment={\n                <InputAdornment position=\"end\">\n                    <Box sx={{ color: theme.palette.primary.main, textTransform: 'uppercase', cursor: 'pointer' }} onClick={handleClickMaxValue}>\n                        <Typography>{endAdornmentLabel ?? t('Max')}</Typography>\n                    </Box>\n                </InputAdornment>\n            }\n        />\n    );\n};\n\nexport default BInput;\n","import { Box, Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\nimport BInput from 'components/BInput';\nimport { theme } from 'constants/theme';\n\ninterface ConfigurationProps {\n    onConfigurationChange: (formValues: Record<string, string>) => void;\n    initialData: Record<string, string>;\n}\n\nconst Configuration = ({ onConfigurationChange, initialData }: ConfigurationProps) => {\n    const { t } = useTranslation();\n\n    const handleConfigurationChange = (data: Record<string, string>) => {\n        onConfigurationChange({ ...initialData, ...data });\n    };\n\n    return (\n        <Box color={theme.palette.primary.light}>\n            <Box color={theme.palette.primary.light} mt={theme.spacing(2)}>\n                <Typography variant=\"body2\" align=\"center\">\n                    {t('globe:StakedSBAmount')}\n                </Typography>\n                <BInput name=\"stakedSBAmount\" onChange={handleConfigurationChange} defaultValue={initialData.stakedSBAmount} placeholder={t('globe:EnterStakedBASHAmount')} />\n            </Box>\n\n            <Box mt={theme.spacing(2)}>\n                <Typography variant=\"body2\" align=\"center\">\n                    {t('globe:RewardYieldPercent')}\n                </Typography>\n                <BInput\n                    name=\"rewardYieldPercent\"\n                    onChange={handleConfigurationChange}\n                    defaultValue={initialData.rewardYieldPercent}\n                    endAdornmentLabel={t('globe:Current')}\n                    placeholder={t('globe:EnterRewardYieldPercent')}\n                />\n            </Box>\n\n            <Box mt={theme.spacing(2)}>\n                <Typography variant=\"body2\" align=\"center\">\n                    {t('globe:BASHPriceAtPurchase')}\n                </Typography>\n                <BInput\n                    name=\"BASHPriceAtPurchase\"\n                    onChange={handleConfigurationChange}\n                    defaultValue={initialData.BASHPriceAtPurchase}\n                    endAdornmentLabel={t('globe:Current')}\n                    placeholder={t('globe:EnterBuyPrice')}\n                />\n            </Box>\n\n            <Box mt={theme.spacing(2)}>\n                <Typography variant=\"body2\" align=\"center\">\n                    {t('globe:FutureBASHMarketPrice')}\n                </Typography>\n                <BInput\n                    name=\"futureBASHMarketPrice\"\n                    onChange={handleConfigurationChange}\n                    defaultValue={initialData.futureBASHMarketPrice}\n                    endAdornmentLabel={t('globe:Current')}\n                    placeholder={t('globe:EnterFuturePrice')}\n                />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Configuration;\n","import { Box, Typography } from '@mui/material';\nimport Decimal from 'decimal.js';\nimport { useTranslation } from 'react-i18next';\n\nimport { theme } from 'constants/theme';\nimport { formatUSD } from 'helpers/price-units';\n\nimport { computeDailyROI, getBashRewardsEstimation, getLamboEstimation, getPotentialReturn } from './helper';\n\ninterface ForecastDetailsProps {\n    data: Record<string, string>;\n    initialPrice: Decimal;\n    duration: number;\n}\n\nconst ForecastDetails = ({ data, duration, initialPrice }: ForecastDetailsProps) => {\n    const { t } = useTranslation();\n    const { stakedSBAmount, BASHPriceAtPurchase, rewardYieldPercent, futureBASHMarketPrice } = data;\n\n    const dailyROI = computeDailyROI(rewardYieldPercent, duration);\n    const bashRewardsEstimation = getBashRewardsEstimation(stakedSBAmount, dailyROI);\n    const potentialReturn = getPotentialReturn(stakedSBAmount, bashRewardsEstimation, futureBASHMarketPrice);\n    const nbLambo = getLamboEstimation(potentialReturn);\n\n    const computedForecast = [\n        { key: 'globe:YourInitialInvestment', value: formatUSD(Number(stakedSBAmount) * Number(BASHPriceAtPurchase), 2) },\n        { key: 'globe:CurrentWealth', value: formatUSD(initialPrice.toNumber() * Number(stakedSBAmount), 2) },\n        { key: 'globe:BASHRewardsEstimation', value: Intl.NumberFormat('en', { notation: 'compact', maximumFractionDigits: 2 }).format(bashRewardsEstimation) },\n        { key: 'globe:PotentialReturn', value: formatUSD(potentialReturn) },\n    ].map(({ key, value }, index) => {\n        return (\n            <Box key={index} sx={{ justifyContent: 'space-between', color: 'white', display: 'inline-flex', width: '100%', mt: theme.spacing(2) }}>\n                <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }}>\n                    {t(key)}\n                </Typography>\n                <Typography variant=\"body1\" noWrap>\n                    {value}\n                </Typography>\n            </Box>\n        );\n    });\n\n    const lambos = (\n        <Box key=\"lambos\" sx={{ justifyContent: 'space-between', color: 'white', display: 'inline-flex', width: '100%', mt: theme.spacing(2) }}>\n            <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }}>\n                {t('globe:PotentialNumberLambo')}\n            </Typography>\n            <Typography variant=\"body1\">{nbLambo}</Typography>\n        </Box>\n    );\n\n    return <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>{[...computedForecast, lambos]}</Box>;\n};\n\nexport default ForecastDetails;\n","import { EPOCH_PER_DAY, LAMBO_PRICE } from 'views/Forecast/config';\n\nexport const computeDailyROI = (rewardYieldPercent: string, duration: number) => {\n    return (1 + Number(rewardYieldPercent) / 100) ** (duration * EPOCH_PER_DAY) - 1;\n};\n\nexport const getBashRewardsEstimation = (stakedSBAmount: string, dailyROI: number) => {\n    return Number(stakedSBAmount) * dailyROI;\n};\n\nexport const getPotentialReturn = (stakedSBAmount: string, bashRewardsEstimation: number, futureBASHMarketPrice: string) =>\n    (Number(stakedSBAmount) + bashRewardsEstimation) * Number(futureBASHMarketPrice);\n\nexport const getLamboEstimation = (potentialReturn: number) => Math.round(potentialReturn / LAMBO_PRICE);\n","export const MIN_DAYS = 1;\nexport const MAX_DAYS = 365;\nexport const LAMBO_PRICE = 222_004;\nexport const EPOCH_PER_DAY = 3;\n","import { useState } from 'react';\n\nimport { Grid } from '@mui/material';\nimport Decimal from 'decimal.js';\n\nimport { theme } from 'constants/theme';\nimport { MIN_DAYS, MAX_DAYS } from 'views/Forecast/config';\n\nimport DaysPicker from './components/DaysPicker';\nimport ForecastConfiguration from './components/ForecastConfiguration';\nimport ForecastDetails from './components/ForecastDetails';\n\ninterface ForecastFormProps {\n    BASHPrice: Decimal;\n    SBASHBalance: Decimal;\n    stakingPercentage: Decimal;\n}\n\nconst Dashboard = ({ BASHPrice, stakingPercentage, SBASHBalance }: ForecastFormProps) => {\n    const initialData = {\n        BASHPrice,\n        SBASHBalance,\n        stakingPercentage,\n    };\n\n    const [formData, setFormData] = useState<Record<string, string>>({\n        stakedSBAmount: initialData.SBASHBalance.toString(),\n        rewardYieldPercent: initialData.stakingPercentage.toFixed(2),\n        BASHPriceAtPurchase: initialData.BASHPrice.toFixed(2),\n        futureBASHMarketPrice: initialData.BASHPrice.toFixed(2),\n    });\n\n    const [days, setDays] = useState(MIN_DAYS);\n\n    return (\n        <Grid container mt={theme.spacing(4)}>\n            <Grid item xs={12} sm={5}>\n                <ForecastConfiguration onConfigurationChange={setFormData} initialData={formData} />\n            </Grid>\n            <Grid item xs={12} sm={2} sx={{ display: 'flex', justifyContent: 'center' }}>\n                <DaysPicker currentDay={days} onChange={setDays} minDays={MIN_DAYS} maxDays={MAX_DAYS} />\n            </Grid>\n            <Grid item xs={12} sm={5}>\n                <ForecastDetails data={formData} initialPrice={BASHPrice} duration={days} />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Dashboard;\n","import { Grid } from '@mui/material';\nimport Decimal from 'decimal.js';\nimport { t } from 'i18next';\n\nimport MenuMetric from 'components/Metrics/MenuMetric';\nimport { formatUSDFromDecimal } from 'helpers/price-units';\n\ninterface ForecastMetricsProps {\n    BASHPrice: Decimal;\n    SBASHBalance: Decimal;\n    stakingPercentage: Decimal;\n}\n\nconst ForecastMetrics = ({ BASHPrice, stakingPercentage, SBASHBalance }: ForecastMetricsProps) => {\n    const metrics = [\n        { key: 'BASHPrice', value: formatUSDFromDecimal(BASHPrice, 2) },\n        { key: 'globe:CurrentRewardYield', value: formatUSDFromDecimal(stakingPercentage) },\n        { key: 'globe:YourStakedBASHBalance', value: `${SBASHBalance.toFixed(2)} SBASH` },\n    ].map(({ key, value }) => (\n        <Grid item key={key} xs={6} sm={4} md={4} lg={4} mt={2}>\n            <MenuMetric metricKey={t(key)} value={value} />\n        </Grid>\n    ));\n\n    return (\n        <Grid container spacing={2}>\n            {metrics}\n        </Grid>\n    );\n};\n\nexport default ForecastMetrics;\n","import { Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport { BCard } from 'components/BCard';\nimport { theme } from 'constants/theme';\nimport { selectSBASHBalance } from 'store/modules/account/account.selectors';\nimport { selectComputedMarketPrice } from 'store/modules/markets/markets.selectors';\nimport { selectStakingRebasePercentage } from 'store/modules/metrics/metrics.selectors';\n\nimport Dashboard from './components/Dashboard';\nimport ForecastMetrics from './components/Dashboard/components/ForecastMetrics';\n\nfunction Forecast() {\n    const { t } = useTranslation();\n\n    const BASHPrice = useSelector(selectComputedMarketPrice);\n    const stakingPercentage = useSelector(selectStakingRebasePercentage);\n    const SBASHBalance = useSelector(selectSBASHBalance);\n\n    return (\n        <BCard title={t('globe:ForecastTitle')} zoom={true}>\n            <Typography sx={{ color: theme.palette.primary.light }}>\n                <>{t('globe:EstimateYourReturns')} </>\n            </Typography>\n            <Typography sx={{ color: theme.palette.primary.light, mt: theme.spacing(2) }}>\n                <>{t('globe:ForecastWarning')} </>\n            </Typography>\n\n            <ForecastMetrics {...{ BASHPrice, stakingPercentage, SBASHBalance }} />\n\n            <Dashboard {...{ BASHPrice, stakingPercentage, SBASHBalance }} />\n        </BCard>\n    );\n}\n\nexport default Forecast;\n","import { Box, Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport Loader from 'components/Loader';\nimport { theme } from 'constants/theme';\nimport { selectBondInstances } from 'store/modules/bonds/bonds.selector';\n\nconst NotFound = () => {\n    const { t } = useTranslation();\n\n    const bondsReady = useSelector(selectBondInstances);\n\n    return (\n        <Box\n            sx={{\n                justifyContent: 'center',\n                alignItems: 'center',\n                display: 'flex',\n                height: '100%',\n            }}\n        >\n            {bondsReady.length === 0 && <Loader />}\n            {bondsReady.length > 0 && (\n                <Typography variant=\"h1\" sx={{ textAlign: 'center', fontWeight: '600', color: theme.palette.primary.main }}>\n                    <>{t('PageNotFound')}</>\n                </Typography>\n            )}\n        </Box>\n    );\n};\n\nexport default NotFound;\n","import { Box, Typography } from '@mui/material';\nimport { t } from 'i18next';\nimport { useSelector } from 'react-redux';\n\nimport MemoInlineMetric from 'components/Metrics/InlineMetric';\nimport { theme } from 'constants/theme';\nimport { formatUSDFromDecimal } from 'helpers/price-units';\nimport { selectBalancesInUSD } from 'store/modules/account/account.selectors';\n\nexport const WrapBalanceMetrics = () => {\n    const { BASH, SBASH } = useSelector(selectBalancesInUSD);\n\n    const totalBalance = formatUSDFromDecimal(BASH.add(SBASH), 2);\n\n    const balanceMetrics = [\n        { key: t('wrap:ValueOfYourBASH'), value: formatUSDFromDecimal(BASH, 2) },\n        { key: t('wrap:ValueOfYourStakedBASH'), value: formatUSDFromDecimal(SBASH, 2) },\n    ].map(({ key: metricKey, value }, i) => <MemoInlineMetric key={`metric-${i}`} {...{ metricKey, value }} />);\n\n    return (\n        <>\n            <Box sx={{ display: 'inline-flex', width: '100%', justifyContent: 'space-between', alignItems: 'center', color: theme.palette.primary.light }}>\n                <Typography variant=\"h4\">\n                    <>{t('YourBalance')}</>\n                </Typography>\n                <Typography variant=\"h4\">\n                    <> {totalBalance}</>\n                </Typography>\n            </Box>\n\n            {balanceMetrics}\n        </>\n    );\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { constants, ethers, providers } from 'ethers';\n\nimport { metamaskErrorWrap } from 'helpers/networks/metamask-error-wrap';\nimport { IReduxState } from 'store/slices/state.interface';\n\nimport { loadBalancesAndAllowances } from '../account/account.thunks';\nimport { addPendingTransaction, clearPendingTransaction } from '../transactions/transactions.slice';\nimport { TransactionType, TransactionTypeEnum } from '../transactions/transactions.type';\n\nexport const approveWrapContract = createAsyncThunk('wrapping/approve', async ({ signer }: { signer: providers.Web3Provider }, { getState, dispatch }) => {\n    const {\n        main: {\n            contracts: { SBASH_CONTRACT, WSBASH_CONTRACT },\n        },\n    } = getState() as IReduxState;\n\n    if (!SBASH_CONTRACT || !WSBASH_CONTRACT) {\n        throw new Error('Contract not set');\n    }\n    const gasPrice = await signer.getGasPrice();\n\n    try {\n        const approveTx = await SBASH_CONTRACT.approve(WSBASH_CONTRACT.address, constants.MaxUint256, { gasPrice });\n        dispatch(addPendingTransaction({ type: TransactionTypeEnum.WRAPPING_APPROVAL, hash: approveTx.hash }));\n        await approveTx.wait();\n    } catch (err) {\n        metamaskErrorWrap(err, dispatch);\n    } finally {\n        dispatch(clearPendingTransaction(TransactionTypeEnum.WRAPPING_APPROVAL));\n    }\n\n    const signerAddress = await signer.getSigner().getAddress();\n    dispatch(loadBalancesAndAllowances(signerAddress));\n});\n\nexport const wrapAction = createAsyncThunk(\n    'wrapping/wrapping',\n    async ({ signer, amount, type }: { signer: providers.Web3Provider; amount: number; type: TransactionType }, { getState, dispatch }) => {\n        const {\n            main: {\n                contracts: { WSBASH_CONTRACT },\n            },\n        } = getState() as IReduxState;\n\n        if (!WSBASH_CONTRACT) throw new Error('Unable to get WSBASH_CONTRACT');\n\n        const gasPrice = await signer.getGasPrice();\n\n        try {\n            const transaction =\n                type === TransactionTypeEnum.WRAPPING\n                    ? await WSBASH_CONTRACT.wrap(ethers.utils.parseUnits(amount.toString(), 'gwei'), { gasPrice })\n                    : await WSBASH_CONTRACT.unwrap(ethers.utils.parseEther(amount.toString()), { gasPrice });\n\n            dispatch(addPendingTransaction({ type, hash: transaction.hash }));\n        } catch (err) {\n            return metamaskErrorWrap(err, dispatch);\n        } finally {\n            dispatch(clearPendingTransaction(type));\n        }\n\n        const signerAddress = await signer.getSigner().getAddress();\n        dispatch(loadBalancesAndAllowances(signerAddress));\n    },\n);\n","import { Box } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useSafeSigner } from 'contexts/web3/web3.hooks';\nimport { selectSBASHBalance, selectUserStakingAllowance } from 'store/modules/account/account.selectors';\nimport { addNotification } from 'store/modules/messages/messages.slice';\nimport { selectWrappingPending } from 'store/modules/transactions/transactions.selectors';\nimport { TransactionTypeEnum } from 'store/modules/transactions/transactions.type';\nimport { approveWrapContract, wrapAction } from 'store/modules/wrap/wrap.thunks';\nimport AmountForm from 'views/Staking/components/AmountForm';\n\nexport const UnWrapAction = () => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const SBASHBalance = useSelector(selectSBASHBalance);\n    const { WSBASHAllowanceNeeded } = useSelector(selectUserStakingAllowance);\n    const translactionPending = useSelector(selectWrappingPending);\n\n    const { signer } = useSafeSigner();\n\n    const handleApproveClick = () => {\n        dispatch(approveWrapContract({ signer }));\n    };\n\n    const handleWrappingClick = (amount: number) => {\n        if (amount > 0) {\n            dispatch(wrapAction({ signer, amount, type: TransactionTypeEnum.UNWRAPPING }));\n        } else {\n            dispatch(addNotification({ severity: 'error', description: t('wrap:ProvideAmount') }));\n        }\n    };\n\n    return (\n        <Box>\n            <AmountForm\n                initialValue={0}\n                maxValue={SBASHBalance.toNumber()}\n                transactionType={TransactionTypeEnum.WRAPPING}\n                approvesNeeded={WSBASHAllowanceNeeded}\n                onApprove={handleApproveClick}\n                onAction={handleWrappingClick}\n                approveLabel={t('wrap:ApproveWrapping')}\n                actionLabel={t('wrap:UnWrap')}\n                isLoading={translactionPending}\n            />\n\n            {WSBASHAllowanceNeeded && <>{t('wrap:ApproveNote')}</>}\n        </Box>\n    );\n};\n","import { Box } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useSafeSigner } from 'contexts/web3/web3.hooks';\nimport { selectSBASHBalance, selectUserStakingAllowance } from 'store/modules/account/account.selectors';\nimport { addNotification } from 'store/modules/messages/messages.slice';\nimport { selectWrappingPending } from 'store/modules/transactions/transactions.selectors';\nimport { TransactionTypeEnum } from 'store/modules/transactions/transactions.type';\nimport { approveWrapContract, wrapAction } from 'store/modules/wrap/wrap.thunks';\nimport AmountForm from 'views/Staking/components/AmountForm';\n\nexport const WrapAction = () => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const SBASHBalance = useSelector(selectSBASHBalance);\n    const { WSBASHAllowanceNeeded } = useSelector(selectUserStakingAllowance);\n    const translactionPending = useSelector(selectWrappingPending);\n\n    const { signer } = useSafeSigner();\n\n    const handleApproveClick = () => {\n        dispatch(approveWrapContract({ signer }));\n    };\n\n    const handleWrappingClick = (amount: number) => {\n        if (amount > 0) {\n            dispatch(wrapAction({ signer, amount, type: TransactionTypeEnum.WRAPPING }));\n        } else {\n            dispatch(addNotification({ severity: 'error', description: t('wrap:ProvideAmount') }));\n        }\n    };\n\n    return (\n        <Box>\n            <AmountForm\n                initialValue={0}\n                maxValue={SBASHBalance.toNumber()}\n                transactionType={TransactionTypeEnum.WRAPPING}\n                approvesNeeded={WSBASHAllowanceNeeded}\n                onApprove={handleApproveClick}\n                onAction={handleWrappingClick}\n                approveLabel={t('wrap:ApproveWrapping')}\n                actionLabel={t('wrap:Wrap')}\n                isLoading={translactionPending}\n            />\n\n            {WSBASHAllowanceNeeded && <>{t('wrap:ApproveNote')}</>}\n        </Box>\n    );\n};\n","import { Box, Grid, Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport { BCard } from 'components/BCard';\nimport { BMultiTabs } from 'components/BMultiTab/BMultiTab';\nimport MemoInlineMetric from 'components/Metrics/InlineMetric';\nimport MenuMetric from 'components/Metrics/MenuMetric';\nimport { theme } from 'constants/theme';\nimport { selectFormattedStakeBalance } from 'store/modules/account/account.selectors';\nimport { selectFormattedIndex } from 'store/modules/stake/stake.selectors';\n\nimport { WrapBalanceMetrics } from './components/BalanceMetrics';\nimport { UnWrapAction } from './components/UnWrapAction';\nimport { WrapAction } from './components/WrapAction';\n\nfunction Wrap() {\n    const { t } = useTranslation();\n\n    const currentIndex = useSelector(selectFormattedIndex);\n    const balances = useSelector(selectFormattedStakeBalance);\n\n    const wrapMetrics = [\n        { key: t('common:YourBalance'), value: balances.BASH },\n        { key: t('wrap:YourStakedBalance'), value: balances.SBASH },\n    ].map(({ key: metricKey, value }, i) => <MemoInlineMetric key={`metric-${i}`} {...{ metricKey, value }} />);\n\n    const tabs = [\n        { label: t('Wrap:Wrap'), component: <WrapAction /> },\n        { label: t('Wrap:UnWrap'), component: <UnWrapAction /> },\n    ];\n\n    return (\n        <>\n            <BCard title={t('wrap:WrapTitle')} zoom={true}>\n                <Typography sx={{ color: theme.palette.primary.dark }}>\n                    <>{t('wrap:WrapYourBASH')} </>\n                </Typography>\n\n                <Grid container pt={theme.spacing(4)}>\n                    <Grid xs={2} item>\n                        <MenuMetric metricKey={t('common:CurrentIndex')} value={currentIndex} />\n                    </Grid>\n                </Grid>\n\n                <Box>\n                    <BMultiTabs tabs={tabs} />\n                </Box>\n\n                <Box mt={theme.spacing(4)}>{wrapMetrics}</Box>\n            </BCard>\n\n            <BCard title={''} zoom={true}>\n                <WrapBalanceMetrics />\n            </BCard>\n        </>\n    );\n}\n\nexport default Wrap;\n","import { Typography } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\nimport { BCard } from 'components/BCard';\n\nconst CritialError = () => {\n    const { t } = useTranslation('common');\n\n    return (\n        <BCard title={t('errors.critical')} zoom>\n            <Typography variant=\"body1\">\n                <>{t('errors.network')}</>\n            </Typography>\n        </BCard>\n    );\n};\n\nexport default CritialError;\n","import './style.scss';\nimport { lazy, Suspense, useContext, useEffect, useLayoutEffect } from 'react';\n\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Loader from 'components/Loader';\nimport { Web3Context } from 'contexts/web3/web3.context';\nimport { useProvider, useSignerConnected } from 'contexts/web3/web3.hooks';\nimport { loadBalancesAndAllowances } from 'store/modules/account/account.thunks';\nimport { selectAppLoading, selectMetricsLoading } from 'store/modules/app/app.selectors';\nimport { getBlockchainData, getCoreMetrics, getStakingMetrics, initializeProviderContracts } from 'store/modules/app/app.thunks';\nimport { MainSliceState } from 'store/modules/app/app.types';\nimport { selectAllActiveBondsIds, selectBondDetailsCalcReady } from 'store/modules/bonds/bonds.selector';\nimport { calcBondDetails, initializeBonds } from 'store/modules/bonds/bonds.thunks';\nimport { getMarketPrices } from 'store/modules/markets/markets.thunks';\nimport { IReduxState } from 'store/slices/state.interface';\nimport { RootState } from 'store/store';\n\nimport { CritialError, NotFound, Wrap, Forecast, Redeem } from '../views';\n\nconst Dashboard = lazy(() => import('views/Dashboard'));\nconst Stake = lazy(() => import('views/Staking'));\nconst BondList = lazy(() => import('views/Bond/BondList/BondList'));\nconst BondDialog = lazy(() => import('../views/Bond/BondDialog'));\n\nfunction App(): JSX.Element {\n    const dispatch = useDispatch();\n\n    const {\n        state: { signer, signerAddress, networkID },\n    } = useContext(Web3Context);\n\n    const provider = useProvider();\n    const isSignerConnected = useSignerConnected();\n\n    const { errorEncountered, contractsLoaded } = useSelector<IReduxState, MainSliceState>(state => state.main, shallowEqual);\n    const appIsLoading = useSelector(selectAppLoading);\n    const activeBondsIds = useSelector(selectAllActiveBondsIds);\n    const coreMetricsLoading = useSelector(selectMetricsLoading);\n    const bondCalcMetricsReady = useSelector(selectBondDetailsCalcReady);\n    const bondMetrics = useSelector((state: RootState) => state.bonds.bondMetrics);\n\n    useLayoutEffect(() => {\n        if (networkID)\n            if (isSignerConnected) {\n                dispatch(initializeProviderContracts({ signer }));\n            } else if (!isSignerConnected && provider && !contractsLoaded) {\n                dispatch(initializeProviderContracts({ provider }));\n            }\n    }, [isSignerConnected, provider, networkID]);\n\n    useEffect(() => {\n        if ((provider || signer) && contractsLoaded && networkID) {\n            batch(() => {\n                dispatch(getBlockchainData(signer || provider));\n                dispatch(getCoreMetrics());\n                dispatch(getStakingMetrics());\n                dispatch(getMarketPrices());\n                dispatch(initializeBonds(signer || provider));\n            });\n        }\n    }, [provider, signer, contractsLoaded]);\n\n    useEffect(() => {\n        if (signerAddress && contractsLoaded) {\n            dispatch(loadBalancesAndAllowances(signerAddress));\n        }\n    }, [signerAddress, contractsLoaded]);\n\n    useEffect(() => {\n        if (signerAddress && contractsLoaded && networkID && contractsLoaded && !coreMetricsLoading && activeBondsIds.length > 0 && !bondCalcMetricsReady) {\n            batch(() => {\n                for (const bondID of activeBondsIds) {\n                    if (bondMetrics[bondID].loading === false) {\n                        dispatch(calcBondDetails({ bondID, value: 0, networkID }));\n                    }\n                }\n            });\n        }\n    }, [signerAddress, contractsLoaded, networkID, activeBondsIds, contractsLoaded, coreMetricsLoading]);\n\n    useEffect(() => {\n        if (provider && !signer && contractsLoaded && networkID && contractsLoaded && !coreMetricsLoading && activeBondsIds.length > 0 && !bondCalcMetricsReady) {\n            batch(() => {\n                for (const bondID of activeBondsIds) {\n                    dispatch(calcBondDetails({ bondID, value: 0, networkID }));\n                }\n            });\n        }\n    });\n\n    if (errorEncountered) return <CritialError />;\n\n    if (appIsLoading) {\n        return <Loader />;\n    }\n\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <Suspense fallback={<Loader />}>\n                    <Dashboard />\n                </Suspense>\n            </Route>\n\n            <Route path=\"/stake\">\n                <Suspense fallback={<Loader />}>\n                    <Stake />\n                </Suspense>\n            </Route>\n\n            <Route path=\"/bonds\">\n                <Suspense fallback={<Loader />}>\n                    <BondList />\n                </Suspense>\n            </Route>\n\n            <Route path=\"/forecast\">\n                <Forecast />\n            </Route>\n\n            <Route path=\"/wrap\">\n                <Wrap />\n            </Route>\n\n            <Route path=\"/redeem\">\n                <Redeem />\n            </Route>\n\n            {activeBondsIds.map((bond, key) => (\n                <Route key={key} path={`/bond/${bond}`}>\n                    <Suspense fallback={<Loader />}>\n                        <BondDialog key={bond} open={true} bondID={bond} />\n                    </Suspense>\n                </Route>\n            ))}\n            <Route component={NotFound} />\n        </Switch>\n    );\n}\n\nexport default App;\n"],"sourceRoot":""}